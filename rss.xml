<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>仲儿的自留地</title>
    <description>个人的一个技术博客站点，主要用于记录个人在学习过程中遇到的技术问题及解决方法、技术实验，以及一些比较有趣的事情。</description>
    <link>https://lisz.me//</link>
    <atom:link href="https://lisz.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 05 Oct 2023 20:42:06 +0900</pubDate>
    <lastBuildDate>Thu, 05 Oct 2023 20:42:06 +0900</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>图片处理及上传命令行工具 —— PICTL</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  自从博客从 WordPress 转到静态博客（先 Hexo 后 Jekyll）之后，文章的图片处理、图片上传就成了一个不大顺畅的事情。最先是使用了 &lt;a href=&quot;https://vgy.me&quot;&gt;vgy.me&lt;/a&gt; 提供的免费图床，支持直接从剪切板上传，操作上相对比较简单，也不需要任何本地存储。不过后来 vgy.me 进行了升级改版，原先的剪切板上传功能也不再支持了，偶尔还出现图片像素被降低、丢失的问题。同时，考虑到 WebP 格式可能会适合博客使用，而 vgy.me 还不支持该格式。于是开始切换到 “对象存储 + CDN” 的方案。本地准备好的 PNG 格式图片，先通过 &lt;a href=&quot;https://developers.google.com/speed/webp/&quot;&gt;cwebp&lt;/a&gt; 命令行转成 WebP 格式图片，再通过 &lt;a href=&quot;https://github.com/gee1k/uPic&quot;&gt;uPic&lt;/a&gt; 工具修改文件名后上传到对象存储。由于此前采用的是腾讯云的 COS 对象存储和 CDN，经常面临着 SSL 证书更新等琐碎的事情。这样一来，整体的效率实际上并不高，只能说勉强接受。&lt;/p&gt;

&lt;h3 id=&quot;现有工具及存储考察&quot;&gt;现有工具及存储考察&lt;/h3&gt;

&lt;p&gt;  为此，也对其他工具和对象存储进行了考察。&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;https://github.com/Molunerfinn/PicGo&quot;&gt;PicGo&lt;/a&gt; 是一款集客户端 UI 和命令行于一体的图片上传工具，虽然可以利用命令串联的方式简单将图片格式转换和上传两步变成一步，但还是有那么点不舒服的地方，比如 PicGo 不提供文件名修改（为固定长度随机字符串）的特性。而 uPic 本身关注于客户端桌面交互，不提供命令行接口。&lt;/p&gt;

&lt;p&gt;  至于对象存储，国内各家云服务厂商提供的都需要自行手动更新 SSL 证书，且收费。尽管腾讯云 CDN 目前老用户可以每月领券免费使用，但一旦忘记就开始被收费了。实际上也有逐步转向收费的趋势。国外各家云服务厂商基本上都需要收费使用对象存储或者 CDN，大差不差。&lt;/p&gt;

&lt;p&gt;  当然，网上一直有一种 “Backblaze B2 + Cloudflare” 的解决方案。由于 B2 本身存储和读写操作都有免费额度，流量需要收费，且无法自定义域名，而 B2 和 Cloudflare 同属于宽带联盟（内部流量免费），Cloudflare 还提供 URL 重写功能，这种解决方案一时成为了潮流。不过，B2 的访问链接是中间带着一串参数，重写之后仍然还是有部分参数，最终的 URL 并不是那么朴素。总的来说，还是有那么点别扭。&lt;/p&gt;

&lt;h3 id=&quot;r2-的出现&quot;&gt;R2 的出现&lt;/h3&gt;

&lt;p&gt;  因此观望了许久，直到 Cloudflare 推出了 R2。R2 是一款对标 AWS S3 的产品，基于 Cloudflare 对宽带联盟的承诺而构建，为存储对象提供零成本出口，实际上就是免费 CDN。由于 Cloudflare 本身就是一家 CDN 服务商，自定义对象存储访问域名、自动生成部署 SSL 证书这些事情就变得轻而易举了。R2 提供 10GB 的免费存储，读操作每月免费 1000 万次，写、更新和删除操作每月免费 100 万次。这对于一般的静态博客来说，应该完全足够了，即使超出了免费额度，超出部分收费也相较其他云服务厂商便宜一些。&lt;/p&gt;

&lt;p&gt;  对笔者而言，R2 产品将对象存储和 CDN 两款产品有机地结合起来，解决了静态博客图片对外访问前的“最后一公里”。于是想从 COS 迁移到 R2，无奈 uPic 这个时候卖了个“破绽”。uPic 似乎在开始转向商业收费，Github 上不再发布新版本，而仅在 Appstore 上继续更新对 R2 的支持。当然，Appstore 上的 uPic 是收费的（4.99 美元，其实也不贵）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  R2 虽然说是对标 AWS S3，但是并没有完整实现所有 API 接口，所以目前 Github 上发布的 uPic 版本无法兼容。尽管可以自行通过修改 uPic 的开源代码来实现兼容，但毕竟修改别人的代码的成本还是有一点高的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;开个新项目&quot;&gt;开个新项目&lt;/h2&gt;

&lt;p&gt;  在充分梳理个人使用需求之后，还是决定开个新项目——开发一款简单易用的命令行工具 PICTL（全称 &lt;strong&gt;Pi&lt;/strong&gt;cture &lt;strong&gt;C&lt;/strong&gt;on&lt;strong&gt;t&lt;/strong&gt;ro&lt;strong&gt;l&lt;/strong&gt;）。该工具须具备以下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑图片的存储空间大小和网页加载时长，所有图片应被压缩并转成 WebP 格式；&lt;/li&gt;
  &lt;li&gt;所有图片的名称应被修改成一个固定长度随机字符串，并支持上传到类 S3 的对象存储；&lt;/li&gt;
  &lt;li&gt;简单易用，命令行优先，无网页或桌面交互界面；&lt;/li&gt;
  &lt;li&gt;（可选）自动添加水印；&lt;/li&gt;
  &lt;li&gt;（可选）根据设定自动调整图片尺寸；&lt;/li&gt;
  &lt;li&gt;（可选）可以直接从剪切板读取图片。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构设计&quot;&gt;架构设计&lt;/h2&gt;

&lt;p&gt;  根据所列出的特性，这款命令行工具主要的模块就是：&lt;strong&gt;图片处理模块&lt;/strong&gt;和&lt;strong&gt;上传模块&lt;/strong&gt;，架构如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Gl8qhI.webp&quot; alt=&quot;PICTL 架构图 The architecture of PICTL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  图片处理模块包括图片压缩、图片格式转换、图片水印、尺寸调整等功能，可以进行无缝横向扩展。上传模块主要包括对于三种存储方式的支持：&lt;strong&gt;第一类&lt;/strong&gt;是最为广泛的类 S3 对象存储，如 R2、AWS S3 及国内外云服务厂商各种对象存储等，&lt;strong&gt;第二类&lt;/strong&gt;是目前仍然在博客中广泛流行的第三方图床，如 &lt;a href=&quot;https://sm.ms&quot;&gt;SM.MS&lt;/a&gt;、&lt;a href=&quot;https://vgy.me&quot;&gt;vgy.me&lt;/a&gt;、&lt;a href=&quot;https://github.com/chevereto/chevereto&quot;&gt;chevereto&lt;/a&gt; 类型图床等，&lt;strong&gt;第三类&lt;/strong&gt;是自托管 Git 平台和 FTP 平台。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;warning “特此声明”
  鉴于 Github、Gitlab、Gitee 等公共代码托管平台均禁止把 Git 仓库作为图床的做法，本工具仅支持自建 Git 平台，如自建 Gitlab 和 Gitlab Pages。如试图上传到公共代码托管平台，本工具会自行中断上传。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  本工具由于仅支持命令行，所以计划用 Python 和 &lt;a href=&quot;https://click.palletsprojects.com/&quot;&gt;Click&lt;/a&gt; 进行开发。虽然借助 &lt;a href=&quot;https://google.github.io/python-fire/&quot;&gt;Google Fire&lt;/a&gt; 也可以快速开发命令行工具，但其使用方式上与原生 *nix 的命令行工具有所不同。相比之下，用 Click 开发可能会麻烦一点，但能够开发出更类原生的 Python 命令行工具。当然，目前开发上还是比较喜欢使用 Rust 或者 Go 语言来开发高性能的命令行工具。不过，本工具只是做一些非常简单的工作，没有性能上的瓶颈，用 Python 开发也足够了。&lt;/p&gt;

&lt;h2 id=&quot;开发计划&quot;&gt;开发计划&lt;/h2&gt;

&lt;p&gt;  请移步 &lt;a href=&quot;https://github.com/users/zhonger/projects/5&quot;&gt;Github Project&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;  目前，PICTL 已经在 &lt;a href=&quot;https://github.com/zhonger/pictl/releases&quot;&gt;Github&lt;/a&gt; 和 &lt;a href=&quot;https://pypi.org/project/pictl/&quot;&gt;PyPI&lt;/a&gt; 同步发布了 v0.1.0 版本。该版本实现了以上架构图中的基本功能，即特性中的前三点必要项。接下来介绍一下如何安装和使用本工具。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;  目前支持两种安装方式：&lt;strong&gt;源码安装&lt;/strong&gt;和 &lt;strong&gt;PIP 安装&lt;/strong&gt;，后续将增加对于 brew 的支持。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  安装前，请务必确保已满足 Python 版本高于 3.10 的条件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;源码安装&quot;&gt;源码安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zhonger/pictl
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pictl
pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;pip-安装&quot;&gt;PIP 安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pictl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;h4 id=&quot;显示版本&quot;&gt;显示版本&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
PICTL 0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;列举所有支持命令&quot;&gt;列举所有支持命令&lt;/h4&gt;

&lt;p&gt;  目前 v0.1.0 版本包含四个子命令：config（配置管理），compress（图片处理），upload（上传文件）和 cup（一键式压缩、转换、上传）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl
Usage: pictl &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARGS]...

  A &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line tool &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image processing and uploading &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ex. S3-type&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

  Now it supports:
    - transformation from other image types to &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image as well as
      image compression.
    - image file uploading to AWS S3 or Cloudflare R2.

Options:
  &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;  Show the pictl version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;     Show this message and exit.

Commands:
  compress  Compress any image into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image.
  config    Operations &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the config file &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~/.pictlrc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  cup       Compress image and upload to remote storage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compress and...
  upload    Upload the file to remote storage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;config-子命令&quot;&gt;config 子命令&lt;/h4&gt;

&lt;p&gt;  config 子命令包含 add（添加配置）、delete（删除配置）、info（查看所有配置）和 init（初始化配置）四种操作。使用本工具需要先执行初始行配置操作，再执行其他配置操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config
Usage: pictl config &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARGS]...

  Operations &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the config file &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~/.pictlrc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

Commands:
  add     Add configs to the config file.
  delete  Delete config group from the config file.
  info    Check the configs.
  init    Initialize config file with default configs.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如下所示，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config init&lt;/code&gt; 命令初始化配置。第二次执行时，由于已存在配置文件，会提示已经初始化过了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config init
The settings has been initilized &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/ubuntu/.pictlrc.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config init
/home/ubuntu/.pictlrc already exists.
Please add settings or change it manaully.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config info&lt;/code&gt; 以 JSON 格式打印所有配置信息。配置文件默认采用 TOML 格式。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config info
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;basic&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;length&apos;&lt;/span&gt;: 6, &lt;span class=&quot;s1&quot;&gt;&apos;ntype&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;random&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;algorithm&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;sha1&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.pictlrc
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;basic]
length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6
ntype &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;random&quot;&lt;/span&gt;
algorithm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sha1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config add&lt;/code&gt; 以命令行交互方式添加配置（以下是 R2 的例子）。添加完成后可以再次查看新增后的所有配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config add
&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt; Please input these information &lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;
Group Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default &lt;span class=&quot;s1&quot;&gt;&apos;blog&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?] Type: : R2
   S3
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; R2

Account ID: testid
Bucket Name: &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Key: testkey
Secret: testsecret
Prefix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Default is None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Access Url &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;like &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;https://i.example.com&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: https://i.example.com
New group &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt; has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /Users/zhonger/.pictlrc.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config info
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;basic&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;length&apos;&lt;/span&gt;: 6, &lt;span class=&quot;s1&quot;&gt;&apos;ntype&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;random&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;algorithm&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;sha1&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;endpoint&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;https://testid.r2.cloudflarestorage.com/test&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;bucket&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;prefix&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;testkey&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;secret&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;testsecret&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;url&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;https://i.example.com&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;type&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;R2&apos;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config delete&lt;/code&gt; 命令可以选择删除远程配置组（此处为了展示，除 test 外还添加了其他配置组）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config delete
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?] Please &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;one group: : &lt;span class=&quot;nb&quot;&gt;test
   &lt;/span&gt;blog
   cover
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test

test &lt;/span&gt;has been deleted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;compress-子命令&quot;&gt;compress 子命令&lt;/h4&gt;

&lt;p&gt;  本子命令输入参数为&lt;strong&gt;图片文件名&lt;/strong&gt;，可以带路径。输出图片会被保存在命令执行位置，&lt;strong&gt;而非原图片所在目录&lt;/strong&gt;。执行该操作后，图片还不会被上传，需要继续使用 upload 命令完成上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl compress &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl compress &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME

  Compress any image into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image.

  FILENAME is the name of the file to compress.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl compress ../../pictl/fig01.png
The output file is EVyP2J.webp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;upload-子命令&quot;&gt;upload 子命令&lt;/h4&gt;

&lt;p&gt;  如下所示，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl upload&lt;/code&gt; 命令加上指定上传文件名和远程配置组即可完成上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl upload &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl upload &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME GROUP

  Upload the file to remote storage.

  FILENAME is the name of the file to upload.
  GROUP is the group &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the config file you want to use.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl upload EVyP2J.webp &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Direct URL: https://i.example.com/EVyP2J.webp
Markdown: &lt;span class=&quot;o&quot;&gt;![&lt;/span&gt;EVyP2J.webp]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://i.example.com/EVyP2J.webp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
HTML Code: &amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://i.example.com/EVyP2J.webp&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EVyP2J.webp&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;cup-子命令&quot;&gt;cup 子命令&lt;/h4&gt;

&lt;p&gt;  cup 子命令 = compress 子命令 + upload 子命令，仅需要指定初始图片文件和远程配置组，即可一步完成图片压缩、格式转换、修改名称、上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl cup &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl cup &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME GROUP

  Compress image and upload to remote storage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compress and upload&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

  FILENAME is the name of the file to compress.
  GROUP is the group &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the config file you want to use.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl cup ../../pictl/fig01.png &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;The output file is Gl8qhI.webp
Direct URL: https://i.example.com/Gl8qhI.webp
Markdown: &lt;span class=&quot;o&quot;&gt;![&lt;/span&gt;Gl8qhI.webp]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://i.example.com/Gl8qhI.webp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
HTML Code: &amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://i.example.com/Gl8qhI.webp&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Gl8qhI.webp&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;

&lt;p&gt;  目前的 v0.1.0 版本还比较简陋，不过已经能满足笔者的必要需求，有效提升效率。后续将继续完善、新增功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自动补全（shell completion），增强命令行使用体验。&lt;/li&gt;
  &lt;li&gt;增加对各云服务厂商提供对象存储的支持。&lt;/li&gt;
  &lt;li&gt;增加对各流行图床的支持。&lt;/li&gt;
  &lt;li&gt;增加对自托管 Git 的支持。&lt;/li&gt;
  &lt;li&gt;增加对 FTP 的支持。&lt;/li&gt;
  &lt;li&gt;增加包括水印、调整大小等在内的图片处理的支持。&lt;/li&gt;
  &lt;li&gt;增加与 Unplash 等公共图库的连接，更加便于博客封面的操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.cloudflare.com/introducing-r2-object-storage-zh-cn/&quot;&gt;隆重推出 Cloudflare R2 Storage —— 快速、可靠的对象存储，减免出口费用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cloudflare.com/r2/&quot;&gt;R2 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 13 Jun 2023 13:41:01 +0900</pubDate>
        <link>https://lisz.me/tech/project/pictl.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/project/pictl.html</guid>
        
        <category>pictl</category>
        
        <category>命令行</category>
        
        <category>工具</category>
        
        <category>cli</category>
        
        <category>tool</category>
        
        
        <category>tech</category>
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>通用运行环境版本管理神器 ASDF</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  之前介绍了高性能集群中常用的运行环境和软件版本管理工具 Modules，今天打算介绍一款适合个人或团队开发使用的通用运行环境版本管理神器 &lt;a href=&quot;https://asdf-vm.com/zh-hans/&quot;&gt;ASDF&lt;/a&gt;。与高性能计算任务不同，个人或团队开发项目一般来说都是使用独立的设备或环境，然后通过代码版本跟踪 git 等来进行异步协作。所以说，在每个人的单个或多个设备上都安装配置 Modules 显得有点不太现实和高效。但是项目开发所需的代码环境确实有的时候可能比较复杂，比如说同时需要 Ruby、NodeJS、Java、Python 四种环境，而且可能对于每种环境还有版本的限制。这样一来，光配置这一堆环境就要花上大半天时间了。&lt;/p&gt;

&lt;h3 id=&quot;asdf-简介&quot;&gt;ASDF 简介&lt;/h3&gt;

&lt;p&gt;  ASDF 提供了全平台通用的环境配置方案，使用单个命令行工具和交互界面就可以管理超复杂的运行环境。以往针对不同运行环境，需要使用不同的配置文件来进行版本的声明。对于 ASDF，只需要一个可共享的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; 配置文件即可。ASDF 涵盖了包括 Ruby、NodeJS、Java、PHP、.Net 在内的几百种运行环境，具体可以查看 &lt;a href=&quot;https://github.com/asdf-vm/asdf-plugins&quot;&gt;ASDF 插件列表&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;p&gt;  另外，ASDF 完全支持包括 Bash、Zsh、Fish 和 Elvish 在内的常用 shell 类型，并提供补全功能。在类似 Github Actions 等的 CI/CD 工作流中，也可以轻松使用 ASDF。值得一提的是，笔者翻译了 ASDF 文档的中文版本并被官方采纳，现在 ASDF 官网支持英语、巴西语和中文三种语言。&lt;/p&gt;

&lt;h3 id=&quot;为何不选其他方案&quot;&gt;为何不选其他方案&lt;/h3&gt;

&lt;h4 id=&quot;docker&quot;&gt;Docker&lt;/h4&gt;

&lt;p&gt;  很显然，如果大家的设备上都有 Docker 环境且 CPU 架构相同的话，Docker 无疑是最省心的方案。Docker 镜像的确可以轻松涵盖所有开发环境和实际运行环境（Apache 等 HTTP 服务器、数据库以及其他）。相比笨重的 VMware 或 Virtualbox 虚拟机镜像而言，Docker 镜像也更加小巧、便捷。而且团队可以通过在内部搭建自己的 Docker 镜像仓库，来分享这些镜像给所有参与项目的开发者。唯一可能会有问题的是，设备 CPU 架构和操作系统的多样性可能会给实际操作带来了不小的问题。实际上可能会有 Windows 系统、Linux 系统、MacOS 系统以及 Intel 架构、AMD 架构、ARM 架构（如 M1、M2 等）。可行的解决方法是，尽可能地构建更多架构的镜像。&lt;/p&gt;

&lt;h4 id=&quot;anaconda&quot;&gt;Anaconda&lt;/h4&gt;

&lt;p&gt;  Anaconda 现在可能已经完全超出了一个 Python 环境管理工具，有的时候也可以当成通用软件或环境管理器来用。但是毕竟还是以科学计算为主要目的，如果项目仅仅是 Python、R 语言可能还是比较合适的，对于实际编程所需的其他运行环境来说可能还是支持不够的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;note “小提示”
  据笔者所知，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; 频道里的确有 PHP 等编程语言的支持。除此之外，也有一些热心开发者在个人频道提供了 java-jdk、golang 等编程环境支持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;云开发&quot;&gt;云开发&lt;/h4&gt;

&lt;p&gt;  云开发主要是指基于云基础设施的在线代码开发环境，主要的代表有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cn/cloud9/&quot;&gt;Cloud9&lt;/a&gt;：笔者最早接触过的云开发，目前已被 AWS 收购，更名为 AWS Cloud9。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/codespaces&quot;&gt;Codespaces&lt;/a&gt;：由 Azure 提供云服务、Github 负责运营的一站式云开发环境。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gitpod.io/&quot;&gt;Gitpod&lt;/a&gt;：基于 VS Code 研发的优秀云开发环境，早期以“便捷、快速”著称，较先于 Codespaces 出现。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/product/cloudstudio&quot;&gt;Cloud Studio&lt;/a&gt;：由腾讯云提供云服务、基于 VS Code 的国产云开发环境，能够很好地支持个人开发、招聘笔试、课堂教学、应用快捷部署等各种场景。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.huaweicloud.com/product/cloudide.html&quot;&gt;CodeArts IDE Online&lt;/a&gt;：由华为云提供云服务、基于 VS Code 的国产云开发环境。除了一般云开发所具备的特点，还支持华为鲲鹏原生环境，能够很好地满足跨架构应用开发的需求。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.aliyun.com/product/yunxiao/devstudio&quot;&gt;DevStudio&lt;/a&gt;：由阿里云提供云服务、基于 VS Code 的国产云开发环境。支持应用开发全流程管理，与阿里云各项基础服务紧密结合，适合大规模团队使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了以上列举的云开发之外，也有一些比较传统的小型云开发实践，比如说知名的 &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;、&lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;、&lt;a href=&quot;https://replit.com/&quot;&gt;Replit&lt;/a&gt; 等。虽然说这些云开发主要是适合较小代码库，但在实际学习过程中用处也是很大的。&lt;/p&gt;

&lt;p&gt;  云开发不仅兼顾了传统开发过程中的协同与流程，又将资源与环境整合在云里面，自然而然是最好的解决方案。随着 VS Code 在开发者之间的流行和云服务提供商的努力，基于 VS Code 的云开发环境层出不穷。即使云开发环境本身免费，云也还是要按量按时计费的。对于还没有足够支持上云的团队或个人来说，ASDF 依然是个不错的选择。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境需求&quot;&gt;环境需求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Linux/Unix 环境（Linux、MacOS、Windows WSL）&lt;/li&gt;
  &lt;li&gt;git&lt;/li&gt;
  &lt;li&gt;bash 等（此处以 zsh 为例）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;环境配置&quot;&gt;环境配置&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源码到 ~/.asdf 目录&lt;/span&gt;
git clone https://github.com/asdf-vm/asdf.git ~/.asdf &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v0.11.3

&lt;span class=&quot;c&quot;&gt;# 在 ~/.zshrc 文件中加入内容&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; ~/.zshrc &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
. &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/.asdf/asdf.sh&quot;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 激活配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;c&quot;&gt;# 验证&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf version
v0.11.3-0adc6c1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装插件&quot;&gt;安装插件&lt;/h3&gt;

&lt;p&gt;  由于 ASDF 支持插件较多，这里以 Python 环境为例介绍 ASDF 安装插件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加插件&lt;/span&gt;
asdf plugin add python

&lt;span class=&quot;c&quot;&gt;# 查看已安装插件&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf plugin list
python

&lt;span class=&quot;c&quot;&gt;# 查看最新 Python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf latest python
3.11.2

&lt;span class=&quot;c&quot;&gt;# ASDF 安装 Python 3.11.2 (latest)&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python latest
python-build 3.11.2 /home/ubuntu/.asdf/installs/python/3.11.2
Downloading Python-3.11.2.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/3.11.2/Python-3.11.2.tar.xz
Installing Python-3.11.2...
Installed Python-3.11.2 to /home/ubuntu/.asdf/installs/python/3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看已安装 Python 版本列表&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
  3.11.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;  ASDF 提供全局版本（Global）和本地版本（Local）两种方式定义运行环境版本。全局版本是系统级别的，类似于 PATH 变量中定义的；本地版本则是为了某个代码库或者部分代码准备的，通常在目录中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; 文件里定义。为了区分全局和本地的效果差别，这里再安装一个指定 Python 版本。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询 Python 插件支持的所有版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list all python
2.1.3
2.2.3
......
stackless-3.7.5

&lt;span class=&quot;c&quot;&gt;# 安装 Python 3.9.0&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python 3.9.0
python-build 3.9.0 /home/zhonger/.asdf/installs/python/3.9.0
Downloading Python-3.9.0.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz
Installing Python-3.9.0...
patching file Misc/NEWS.d/next/Build/2021-10-11-16-27-38.bpo-45405.iSfdW5.rst
patching file configure
patching file configure.ac
Installed Python-3.9.0 to /home/zhonger/.asdf/installs/python/3.9.0

&lt;span class=&quot;c&quot;&gt;# 查看已安装 Python 版本列表&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
  3.11.2
  3.9.0

&lt;span class=&quot;c&quot;&gt;# 查看当前系统 Python 及 Python3 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
No python executable found &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;python system

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6

&lt;span class=&quot;c&quot;&gt;# 更改全局版本为 3.11.2 并查看&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;3.11.2
  3.9.0

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.11.2

&lt;span class=&quot;c&quot;&gt;# 创建子目录指定本地版本并查看&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;py &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;py
asdf &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;python 3.9.0

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.9.0

&lt;span class=&quot;c&quot;&gt;# 返回父目录查看 Python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看当前系统 Python3 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  这里有一点比较有趣的是：由于 ASDF 接管的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; 命令而非 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; 命令，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; 命令输出的版本依然还是系统安装版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;其他相关&quot;&gt;其他相关&lt;/h3&gt;

&lt;p&gt;  如果想要恢复到系统指定版本，可以很容易使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf global python system&lt;/code&gt; 命令。当然，对于本地版本，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf local python system&lt;/code&gt; 来实现。除此之外，还有一些常规操作如下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看 Python 指定版本安装位置&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf where python 3.11.2
/home/zhonger/.asdf/installs/python/3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看命令所在位置&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf which python
/home/zhonger/.asdf/installs/python/3.11.2/bin/python

&lt;span class=&quot;c&quot;&gt;# 查看当前 ASDF 管理的运行环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf current
python          3.11.2          /home/ubuntu/.tool-versions

&lt;span class=&quot;c&quot;&gt;# 查看全局和本地版本配置文件&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.tool-versions
python 3.11.2

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/py/.tool-versions
python 3.9.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://asdf-vm.com/zh-hans/guide/getting-started.html&quot;&gt;ASDF 官网 - 快速入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://asdf-vm.com/zh-hans/manage/versions.html&quot;&gt;ASDF 官网 - 版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 15:50:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/asdf.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/asdf.html</guid>
        
        <category>Linux</category>
        
        <category>Environment</category>
        
        <category>Manage</category>
        
        <category>Dev Runtime</category>
        
        <category>软件环境</category>
        
        <category>多版本</category>
        
        <category>管理</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>Modules 配置之 Python</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  近年来得益于其轻量、易学易用、第三方支持依赖库多的特点，Python 语言大量被用于机器学习相关的研究、项目开发。在学术界，有以 &lt;a href=&quot;https://scikit-learn.org&quot;&gt;Scikit-Learn&lt;/a&gt; 为代表的全能机器学习库；在产业界，有以 &lt;a href=&quot;https://www.tensorflow.org&quot;&gt;TensorFlow&lt;/a&gt;、&lt;a href=&quot;https://pytorch.org&quot;&gt;PyTorch&lt;/a&gt; 为代表的生产级机器学习模型计算框架。（当然，学术界实际上构建大规模深度学习模型时也会用到 PyTorch 等计算框架。）但对于大多数人来说，学习这些库、框架或者借助它们从事某些研究、项目开发时，可能还是在用自己的笔记本、台式机。哪怕是在高校的实验室里，这种事情也是屡见不鲜。因此，有交互界面、相对容易上手的 &lt;a href=&quot;https://www.anaconda.com&quot;&gt;Anaconda&lt;/a&gt; 可能会作为大家管理 Python 环境的首选。&lt;/p&gt;

&lt;p&gt;  当我们在用 Python 编写一些代码，而代码一次运行不可能在短短几秒、几分钟内得到结果时，将任务提交给高性能工作站或者集群作业系统就显得格外有效。尤其是当应用规模较大、计算迭代次数较多时，非交互式的作业提交方式会变得更加有利。毕竟如果是用自己的笔记本运行着这么大的计算，资源基本上都被计算占用了，根本没办法用笔记本去干点别的事情。甚至说，计算还会使得 CPU 等核心部件温度上升，从而影响计算性能。这样比较下来，不得不说提交任务给高性能工作站或者集群作业系统是多么明智的选择。&lt;/p&gt;

&lt;p&gt;  其实，Anaconda 在没有交互界面的服务器操作系统上也还是可以使用的，我们可以使用其免费的精简版 —— &lt;a href=&quot;https://conda.io/miniconda&quot;&gt;miniconda&lt;/a&gt;。虽然 miniconda 已经是精简版了，但和原生 Python 环境比起来还是要多不少东西的。从高性能计算环境的角度来看，使用 Modules 直接管理 Python 环境实际上更加贴近原生，也更加有利于用户与其他环境搭配使用。比如说安装  Python 的 MPI 支持库 —— MPI4PY，仅需要通过 Modules 管理工具加载 Python 和 MPI 两个基础环境，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3 install mpi4py&lt;/code&gt; 命令即可安装。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  将 Python 环境纳入 Modules 管理的步骤就是两步：第一步，编译源代码及安装；第二步，添加 Modules 配置文件。当然，最开始还是需要确认一下编译环境是否完备以及文件夹是否准备好。&lt;/p&gt;

&lt;h3 id=&quot;环境及文件夹准备&quot;&gt;环境及文件夹准备&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装编译环境&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; build-essential libbz2-dev libdb-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libreadline-dev libffi-dev libgdbm-dev liblzma-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libncursesw5-dev libsqlite3-dev libssl-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  zlib1g-dev uuid-dev tk-dev wget
  
&lt;span class=&quot;c&quot;&gt;# 准备文件夹&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/python/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;编译及安装&quot;&gt;编译及安装&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源代码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tar.xz

&lt;span class=&quot;c&quot;&gt;# 解压源代码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf Python-3.10.6.tar.xz

&lt;span class=&quot;c&quot;&gt;# 配置安装路径及编译选项&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Python-3.10.6
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/python/3.10.6 &lt;span class=&quot;nt&quot;&gt;--enable-optimizations&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-lto&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# 编译及安装&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置-modules&quot;&gt;配置 Modules&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/modules/modulefiles/py
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /opt/modules/modulefiles/py/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  首先如上命令准备文件夹，并新建 module 配置文件，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#%Module&lt;/span&gt;
proc ModulesHelp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    puts stderr &lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;This module file will load Python 3.10.6&lt;span class=&quot;s2&quot;&gt;&quot;
}

module-whatis  &quot;&lt;/span&gt;Enable Python 3.10.6&lt;span class=&quot;s2&quot;&gt;&quot;

eval set  [ array get env HOME ]
set basedir /opt/python/3.10.6
prepend-path PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LIBRARY_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/lib&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LD_LIBRARY_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/lib&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path INCLUDE_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/include&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LD_INCLUDE_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/include&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有可用模块&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module ava
&lt;span class=&quot;nt&quot;&gt;--------------------------&lt;/span&gt; /opt/modules/modulefiles &lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt;
dot  module-git  module-info  modules  null  py/3.10.6  use.own

Key:
modulepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 加载 python 3.10.6 环境，并确认已加载模块&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module load py/3.10.6
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module list
Currently Loaded Modulefiles:
 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; py/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认目前 python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;  由于以上操作将 Python 3.10.6 安装到了一个系统文件夹中，编译完成后会出现如下警告提示。不过无须担心，普通用户可以通过 venv 虚拟环境工具正常使用。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Installing collected packages: setuptools, pip
  WARNING: The scripts pip3 and pip3.10 are installed &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/opt/python/3.10.6/bin&apos;&lt;/span&gt; which is not on PATH.
  Consider adding this directory to PATH or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer to suppress this warning, use &lt;span class=&quot;nt&quot;&gt;--no-warn-script-location&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully installed pip-22.2.1 setuptools-63.2.0
WARNING: Running pip as the &lt;span class=&quot;s1&quot;&gt;&apos;root&apos;&lt;/span&gt; user can result &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如下所示，当已经如&lt;strong&gt;验证&lt;/strong&gt;部分加载好 python 3.10.6 模块后，使用以下命令新建虚拟环境、激活后即可使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
   新建虚拟环境时最后的参数 env 是指虚拟环境的名字，我们可以取任意符合 python 规则的字符串作为虚拟环境名字。值得注意的是，python 虚拟环境有关的文件将会被安装在命令执行的当前目录下的同名文件夹中。为了便于管理和使用，建议将所有的 python 虚拟环境都放置在同一目录下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 激活 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source env&lt;/span&gt;/bin/activate

&lt;span class=&quot;c&quot;&gt;# 可以看到 &amp;lt;env&amp;gt; 的环境提示&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 尝试升级 pip，可以看到成功升级 &lt;/span&gt;
╭─zhonger@lep-u ~ ‹env›
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; pip
Requirement already satisfied: pip &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ./env/lib/python3.10/site-packages &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;22.2.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Collecting pip
  Using cached pip-23.0.1-py3-none-any.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.1 MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 22.2.1
    Uninstalling pip-22.2.1:
      Successfully uninstalled pip-22.2.1
Successfully installed pip-23.0.1

&lt;span class=&quot;c&quot;&gt;# 取消激活 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;有趣的问题&quot;&gt;有趣的问题&lt;/h2&gt;

&lt;p&gt;  如果使用 module 提供的 python 模块创建了虚拟环境后，实际运行虚拟环境时还需要使用 module 加载 python 模块吗？答案是&lt;strong&gt;不需要&lt;/strong&gt;。虚拟环境的本质是拷贝运行相同命令所需的必要文件，如下对比查看一下 python 模块和 env 虚拟环境的顶级目录。可以发现，两者的差别不是很大。env 虚拟环境少了 share 目录，多了 pyvenv.cfg 文件。查看该文件可知，存在与 python 模块之间的关系的声明。再查看 bin 目录，可以看到 python 可执行命令用了链接的方式，pip 命令则是直接从原来的 python 模块复制过来的。于是，这就能允许普通用户自行管理  pip 命令和 python 库了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/python/3.10.6
bin  include  lib  share

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls env
&lt;/span&gt;bin  include  lib  lib64  pyvenv.cfg

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat env&lt;/span&gt;/pyvenv.cfg
home &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /opt/python/3.10.6/bin
include-system-site-packages &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3.10.6

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ll &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;/bin
total 36K
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 8.9K Mar 20 15:20 Activate.ps1
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 2.0K Mar 20 15:20 activate
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger  908 Mar 20 15:20 activate.csh
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 2.1K Mar 20 15:20 activate.fish
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip3
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip3.10
lrwxrwxrwx 1 zhonger zhonger    7 Mar 20 15:20 python -&amp;gt; python3
lrwxrwxrwx 1 zhonger zhonger   30 Mar 20 15:20 python3 -&amp;gt; /opt/python/3.10.6/bin/python3
lrwxrwxrwx 1 zhonger zhonger    7 Mar 20 15:20 python3.10 -&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/using/unix.html#building-python&quot;&gt;Python 官方文档 - 构建 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/using/configure.html#configure-options&quot;&gt;Python 官方文档 - 性能选项&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/tutorial/venv.html&quot;&gt;Python 官方文档 - 虚拟环境和包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.jp/install/ubuntu/index.html&quot;&gt;Ubuntu 環境の Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 12:48:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/modules-python.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/modules-python.html</guid>
        
        <category>Linux</category>
        
        <category>Modules</category>
        
        <category>Python</category>
        
        <category>软件环境</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>集群动态环境管理神器 Modules</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;citation “Environment Modules 官网”
  Modules 包是一款简化 shell 初始化的工具，允许用户在会话期间使用模块文件轻松切换环境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  在高性能集群或者超算中，我们可以经常看到 Modules 的身影。它可以帮助我们轻松加载运行程序所需的各类环境，比如说笔者之前写过的第一性原理计算软件 CONQUEST 的运行，就需要包括 Intel OneAPI HPCKit、FFTW3、LibXC 在内的多种环境；又比如说运行大规模的机器学习模型时，可能需要 Python、GPU 环境和 PyTorch 等依赖库。&lt;/p&gt;

&lt;p&gt;  由于集群往往是面向很多人服务的，如果管理员将软件安装到全局环境，则只能安装某个软件的某个特定版本，而不能同时为不同的用户提供所需的同款软件的不同版本。举个例子，笔者编写的代码只能在 Python 3.10 环境下运行，而其他用户编写的代码所支持的 Python 版本是 3.0，那么可能最简单的解决方法是笔者自行编译一个 Python 3.10 的环境，然后利用 PATH 等变量的配置来提升优先级。或许之后有一天，另外一个用户也要使用 Python 3.10 环境，那么是不是让他再自行编译配置一遍呢？哈哈哈，听起来有点无奈，但是&lt;strong&gt;千万不要高估集群的使用用户&lt;/strong&gt;，可能自行编译并配置 Python 3.10 对他们来说也有点困难。因此，Modules 成为了集群动态管理软件环境的最佳选择。集群管理员可以预先编译和配置好各种环境的各种版本，用户使用时只需要执行类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module load py/3.10.6&lt;/code&gt; 的命令就可以轻松加载 Python 3.10.6 环境。&lt;/p&gt;

&lt;p&gt;  Modules 所支持的模块不仅仅可以是编程语言的多版本，还可以是其他任意的基础环境，比如说 gcc、openmpi 等编译环境。这样一来，不仅可以为用户提供足够的编程环境直接使用，还可以为一些想要自行编译运行环境的用户提供了便利。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;源码编译安装-modules&quot;&gt;源码编译安装 Modules&lt;/h3&gt;

&lt;p&gt;  Modules 可以在 Linux、Windows、MacOS 任一操作系统上安装运行，这里仅介绍类 Unix 操作系统下的编译安装过程。由于 Modules 需要使用 tcl 工具来解析 modulefiles，所以系统必须预先安装 tcl 及其开发者库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 根据实际情况三者选其一&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu 等 APT 系列操作系统上安装 tcl&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; tcl tcl-dev
&lt;span class=&quot;c&quot;&gt;# CentOS 等 YUM 系列操作系统上安装 tcl&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; tcl tcl-devel
&lt;span class=&quot;c&quot;&gt;# MacOS 操作系统上安装 tcl （需有 brew 工具）&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tcl-tk

&lt;span class=&quot;c&quot;&gt;# 下载源代码并解压&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://github.com/cea-hpc/modules/releases/download/v5.1.1/modules-5.1.1.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xfz modules-5.1.1.tar.gz

&lt;span class=&quot;c&quot;&gt;# 创建安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/modules

&lt;span class=&quot;c&quot;&gt;# 进入目录并配置安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;modules-5.1.1
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/modules
&lt;span class=&quot;c&quot;&gt;# MacOS 可能需要如下另外指定 tclConfig.sh 文件所在的位置&lt;/span&gt;
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/modules &lt;span class=&quot;nt&quot;&gt;--with-tcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/homebrew/opt/tcl-tk/lib

&lt;span class=&quot;c&quot;&gt;# 编译并安装到 /opt/modules 目录&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使-modules-生效&quot;&gt;使 Modules 生效&lt;/h3&gt;

&lt;p&gt;  并非是编译完了之后就可以直接使用 Modules，还有至关重要的一步–&lt;strong&gt;添加生效命令&lt;/strong&gt;。首先需要确认当前使用的 Shell 是什么，一般来说默认是 Bash，当然也有 Zsh 等等。然后，在对应的 Shell 配置文件中增加一行生效命令。操作如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认当前使用的 Shell&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
/bin/zsh

&lt;span class=&quot;c&quot;&gt;# 查看 Modules 支持的 Shell&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/modules/init
bash            cmake           fish            ksh             lisp            profile.csh     python.py       ruby.rb         tcl             tcsh_completion zsh-functions
bash_completion csh             fish_completion ksh-functions   perl.pm         profile.sh      r.R             sh              tcsh            zsh
&lt;span class=&quot;c&quot;&gt;# 如上所示，大部分流行的 Shell 都在支持列表中&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 使 Modules 生效&lt;/span&gt;
vim ~/.zshrc
&lt;span class=&quot;c&quot;&gt;# 添加以下内容&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /opt/modules/init/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;源码编译安装-tcl&quot;&gt;源码编译安装 tcl&lt;/h3&gt;

&lt;p&gt;  Modules 的编译安装是不是很简单？不过如果 tcl 工具无法使用命令安装的话，就只能从源码编译安装，也比较方便，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源码并解压&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://prdownloads.sourceforge.net/tcl/tcl8.6.12-src.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xfz tcl8.6.12-src.tar.gz

&lt;span class=&quot;c&quot;&gt;# 创建安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /opt/tcl

&lt;span class=&quot;c&quot;&gt;# 进入目录并配置安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tcl8.6.12/unix
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/tcl

&lt;span class=&quot;c&quot;&gt;# 编译并安装&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modules-相关命令&quot;&gt;Modules 相关命令&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有可用模块&lt;/span&gt;
module avail / module ava

&lt;span class=&quot;c&quot;&gt;# 加载指定模块（支持同时加载多个模块）&lt;/span&gt;
module load py/3.10.6 mpi

&lt;span class=&quot;c&quot;&gt;# 查看已加载模块&lt;/span&gt;
module list

&lt;span class=&quot;c&quot;&gt;# 查看指定模块&lt;/span&gt;
module show py/3.10.6

&lt;span class=&quot;c&quot;&gt;# 添加自定义模块配置目录&lt;/span&gt;
module use &lt;span class=&quot;nt&quot;&gt;--apend&lt;/span&gt; ~/opt/modulefiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;添加软件环境&quot;&gt;添加软件环境&lt;/h2&gt;

&lt;h3 id=&quot;modulefiles-库&quot;&gt;Modulefiles 库&lt;/h3&gt;

&lt;p&gt;  Modules 编译安装后默认会有一些环境，它们的配置文件都被存储在安装目录的 modulefiles 文件夹中，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module ava
&lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt; /opt/modules/modulefiles &lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt;
dot  module-git  module-info  modules  null  use.own

Key:
modulepath

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/modules/modulefiles
dot         module-git  module-info modules     null        use.own
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  一般来说，打算提供给所有用户的环境配置都可以放在这个目录里，这样任何用户都可以查看到。&lt;/p&gt;

&lt;h3 id=&quot;modulefiles-模板&quot;&gt;Modulefiles 模板&lt;/h3&gt;

&lt;p&gt;  这里我们可以把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use.own&lt;/code&gt; 文件作为模板来学习一下如何编写 Modulefiles 文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#%Module1.0#####################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## use.own modulefile&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
proc ModulesHelp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module file will add &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;HOME/privatemodules to the&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;list of directories that the module command will search&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;for modules.  Place your own module files here.&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module, when loaded, will create this directory&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;if necessary.&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

module-whatis   &lt;span class=&quot;s2&quot;&gt;&quot;adds your own modulefiles directory to MODULEPATH&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval set&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; array get &lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;HOME &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ownmoddir   &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/privatemodules

&lt;span class=&quot;c&quot;&gt;# create directory if necessary&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; module-info mode load &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; file exists &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        file &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;null &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;open &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;/null w]
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#%Module########################################################################&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;## null modulefile&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;proc ModulesHelp { } {&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module does absolutely nothing.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;It&apos;s meant simply as a place holder in your&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dot file initialization.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-whatis   &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;does absolutely nothing&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

module use &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  Modulefiles 文件一般符合以下规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modulefiles 文件必须以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#%Module1.0&lt;/code&gt; 开头；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc ModulesHelp {}&lt;/code&gt; 函数来添加模块详细描述；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module-whatis&lt;/code&gt; 字段来添加一句话简短描述；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval set [ array get env HOME]&lt;/code&gt; 来获取系统变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set ownmoddir&lt;/code&gt; 来定义变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ownmoddir&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;后续脚本可以根据需求进行添加内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  这里先开个坑，后续打算补充 Modules 配置系列文章：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;modules-python.html&quot;&gt;《Modules 配置之 Python》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;modules-conda.html&quot;&gt;《Modules 配置之 Anaconda》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;modules-intel.html&quot;&gt;《Modules 配置之 Intel OneAPI》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://modules.readthedocs.io/en/latest/index.html&quot;&gt;Environment Modules 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Oct 2022 15:48:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/modules.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/modules.html</guid>
        
        <category>Linux</category>
        
        <category>集群</category>
        
        <category>Cluster</category>
        
        <category>Modules</category>
        
        <category>软件环境</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 OpenVPN 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;easy-connect&quot;&gt;Easy Connect&lt;/h3&gt;

&lt;p&gt;  公司、学校、云服务等一般需要将内外网进行分离，如果想要从外部网络访问某些内部应用，通常需要使用公司、学校、云服务提供的专用网络接入服务。国内公司、学校比较常用的是由深信服开发的 Easy Connect，一种 SSL VPN 技术的实现。虽然每年需要支付一定的费用来维护、升级 Easy Connect 服务，但是毕竟它能够提供比较细粒度的权限控制，比如说对目标 IP、目标端口的特别指定，能够有效保护内网服务器只有 Web 应用本身能被用户接入，而类似于 SSH 等服务及端口则可以通过单独申请和配置来实现。总而言之，除了需要付费，似乎没有什么不好的地方。&lt;/p&gt;

&lt;p&gt;  实际上如果是在大公司或者学校的话，可能在内网里面还会有更深的内网存在。举个例子，正常的内网是日常的办公或开发网络，服务器所处的内网是独立的网络，即使是已经连接了办公网络，还是需要通过专用网络接入服务器内网才能进行服务器的维护。如果是以数据中心的模式运营的话，甚至说每一次访问服务器都是需要经过临时审批和登录密码发放的。一旦过了有效时间或者完成了任务，访问都将会被拒绝。&lt;/p&gt;

&lt;h3 id=&quot;openvpn&quot;&gt;OpenVPN&lt;/h3&gt;

&lt;p&gt;  虽然 Easy Connect 可以用于上述的场景，但是似乎显得有些大材小用了，毕竟还是要支付一定费用的。为了尽量降低成本，开源的 OpenVPN 或许是一种不错的选择。据笔者所知，Easy Connect 根据购买的许可不同允许的同时在线人数可能也会不同，实际上可能存在“需大于供”的问题。为了缓解这一可能存在的问题，还是会搭建一套 OpenVPN 来作为冗余接入方式。其实 OpenVPN 的商业版本许可也是会有人数限制的，只不过因为只是备份方式也没有太大关系。&lt;/p&gt;

&lt;p&gt;  OpenVPN 除了开源免费之外，还支持大部分主流的认证方式，比如说 LDAP 认证、微软的商业级目录服务 Active Directory（简称 AD）认证等。近年来，基于 Identify Provider（简称 IdP）、Single Sign On（简称 SSO）、Central Authentication Service（简称 CAS）等的国产化的一站式登录服务解决方案也在逐渐替换原来的 LDAP 或 AD 直接认证，LDAP 或 AD 将作为底层的基础认证方式存在。所以说，开源免费的 LDAP 目录服务在一般的团队中还是足够的，作为 OpenVPN 的认证方式也是完全能满足要求的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;warning “提醒”
  在公网上搭建专用网络接入服务是需要有工信部颁发的专门资格许可的，一般公司、学校、云服务都是有该类资格许可，所以可以对外提供该项服务。而个人是无法获得这类许可，除非注册公司并申请该类许可。如果个人在云服务上搭建该类服务，将会面临被云服务提供商警告甚至单方面停止服务的风险。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境要求&quot;&gt;环境要求&lt;/h3&gt;

&lt;p&gt;  在实践前请务必保证具备以下环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
  &lt;li&gt;可用的 LDAP 目录服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;启动实例&quot;&gt;启动实例&lt;/h3&gt;

&lt;p&gt;  为了方便部署和测试，这里采用 &lt;a href=&quot;https://hub.docker.com/r/wheelybird/openvpn-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 提供的 Docker 镜像。这个镜像比较小，同时也支持 x64 和 arm 两种体系架构，能满足大部分主流服务器平台。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;openvpn&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cap_add&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NET_ADMIN&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openvpn&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1194:1194/udp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/timezone:/etc/timezone:ro&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./openvpn-data:/etc/openvpn&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OVPN_SERVER_CN=oc-vpn.example.com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_URI=ldap://ldap.example.com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BASE_DN=ou=users,dc=example,dc=com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BIND_USER_DN=cn=admin,dc=example,dc=com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BIND_USER_PASS=password&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_LOGIN_ATTRIBUTE=uid&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LOG_TO_STDOUT=false&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OVPN_DNS_SEARCH_DOMAIN=example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用以下 docker-compose.yml 文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动实例。为了能够避免实例在重新创建后证书发生改变，将 Docker 实例中 /etc/openvpn 的目录持久化（与本地目录绑定）是非常重要的。在这里给出的环境变量（environment）中，前三项 OVPN_SERVER_CN、LDAP_URI、LDAP_BASE_DN 是必须要有的。如果 LDAP 目录服务默认是不能被匿名查找的，也必须包含 LDAP_BIND_USER_DN 和 LDAP_BIND_USER_PASS 变量的（即管理员账户名和密码）。当然，如果你想要指定匹配登录用户名字段，则需要新增 LDAP_LOGIN_ATTRIBUTE 变量。该变量默认是 uid 字段，也可以指定为其他 LDAP 目录服务中包含的字段，比如 email。这个镜像默认是会将服务的实时输出打印在终端，如果想要以日志文件的形式保存下来，则将变量 LOG_TO_STDOUT 置为 false 即可。&lt;/p&gt;

&lt;p&gt;  一般来说，服务器内网为了管理方便，会根据服务器的 ip 和编号来配置对应的域名解析及反向域名解析，形如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2-1-1-1-1.aws.com&lt;/code&gt;，也有可能就是简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1.sever.aws.com&lt;/code&gt;。所以当接入服务器内网后，我们可能会期望用 c1 来作为这台服务器的标签，而在终端我们也可能通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping c1&lt;/code&gt; 来测试通路。实际上只要在启动实例时新增变量 OVPN_DNS_SEARCH_DOMAIN 就可以实现，当然这里变量对应的值也应该变成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.aws.com&lt;/code&gt;。相当于，有了这个配置后，本地 DNS 解析没有记录时会自动尝试加入后缀来解析。这样一来，是不是方便了很多呢？&lt;/p&gt;

&lt;p&gt;  除此之外，该镜像还支持其他一些特性，比如 OTP，请访问 &lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h4 id=&quot;生成配置文件&quot;&gt;生成配置文件&lt;/h4&gt;

&lt;p&gt;  在生成配置文件上，&lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 要比 &lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt; 更复杂一些，可以手动从 Docker 实例的日志文件或终端输出内容中看到内容，大致内容形式如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#---------- Start of client.ovpn ----------&lt;/span&gt;

client
tls-client
dev tun
persist-key
persist-tun
remote-cert-tls server
key-direction 1
auth SHA512
proto tcp
reneg-sec 0

comp-lzo
redirect-gateway def1
auth-user-pass

&lt;span class=&quot;c&quot;&gt;# Set log file verbosity&lt;/span&gt;
verb 3

&amp;lt;connection&amp;gt;
remote oc-vpn.example.com 1194 udp
float
nobind
&amp;lt;/connection&amp;gt;

&amp;lt;ca&amp;gt;
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; CERTIFICATE-----
.........
.........
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; CERTIFICATE-----
&amp;lt;/ca&amp;gt;
&amp;lt;tls-auth&amp;gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2048 bit OpenVPN static key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; OpenVPN Static key V1-----
.........
.........
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; OpenVPN Static key V1-----
&amp;lt;/tls-auth&amp;gt;
key-direction 1
&lt;span class=&quot;c&quot;&gt;#----------  End of client.ovpn  ----------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  将以上内容复制保存在 oc-vpn.example.com.ovpn 文件中即可。&lt;/p&gt;

&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;  通常来说使用 OpenVPN 专用或者兼容客户端来加载配置文件 oc-vpn.example.com.ovpn，当然也可以用终端命令连接，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openvpn &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; oc-vpn.example.com.ovpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  执行上述命令后会提示输入用户名和密码进行认证，认证通过后会建立连接。默认分配的是 10.50.50.0/24 段中的某个 IP，网关为 10.50.50.254，当然这个也可以在启动实例时自行设置。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;warning “再次提醒”
  以上内容比较适用于团队办公或开发网络与服务器网络独立分离的情况（&lt;strong&gt;内网环境&lt;/strong&gt;）。请勿在未获得工信部的资质许可的情况下在公网部署类似服务，一旦被云服务提供商监测到，云服务提供商有权进行警告、断网、关停等操作，并且无法申诉。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;note “提示”
我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：&lt;a href=&quot;https://cloud.tencent.com/developer/support-plan?invite_code=1jkj42lj2m4nn&quot;&gt;加入链接&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 15:04:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-openvpn.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-openvpn.html</guid>
        
        <category>LDAP</category>
        
        <category>OpenVPN</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 Squid 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Squid cache，简称 Squid，是一款高性能的代理缓存软件。Squid 本身支持包括 HTTP、HTTPS、FTP、SSH 在内的多种协议，且采用一个单独的、非模块化的、I/O 驱动的进程来处理所有的客户端请求，从而提供&lt;strong&gt;主动缓存加速&lt;/strong&gt;的功能。除此之外，Squid 还可以提供&lt;strong&gt;应用层过滤控制&lt;/strong&gt;的功能，也可与其他的&lt;strong&gt;防病毒&lt;/strong&gt;软件一起使用。在一些大公司、学校、研究机构内部，一般采用 Squid 代理上网的方式，可以过滤危险内容或操作、节省网络带宽、提升访问速度。&lt;/p&gt;

&lt;p&gt;  但实际上 Squid 代理也可用于正向代理，即为外来用户访问内网应用提速。这也是 CDN（内容分发网络）的加速原理，利用位于全球网络边缘的节点提供服务，而实际上的应用内容则通过边缘节点间的内网来缓存提速。&lt;/p&gt;

&lt;p&gt;  虽然 Squid 一般部署在团队或公司网络内部，但是由于用户的权限不同可能需要应用不同的规则，所以能够与 LDAP 认证服务结合就变得非常重要了。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境要求&quot;&gt;环境要求&lt;/h3&gt;

&lt;p&gt;  在进行正式的实践之前，务必确保已有以下环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;启动实例&quot;&gt;启动实例&lt;/h3&gt;

&lt;p&gt;  笔者已经编译并公开了在多种体系架构上可用的 Docker 镜像 &lt;a href=&quot;https://github.com/zhonger/docker-squid&quot;&gt;zhonger/squid&lt;/a&gt;。这里直接使用以下 docker-compose.yml 配置文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动实例。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.2&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;squid&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3128:3128&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/timezone:/etc/timezone:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQUID_SSH=true&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQUID_RSYNC=false&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_ENABLE=true&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_HOST=yourldap.domain.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_PORT=389&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BindDN=&quot;cn=admin,dc=yourdomain,dc=com&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BindPass=&quot;********&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_DN=&quot;ou=Users,dc=yourdomain,dc=com&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_ATTRIBUT=&quot;uid=%s&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PROXY_NAME=&quot;Proxy Display Name&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  上面有关的配置变量及其含义可以访问 &lt;a href=&quot;https://github.com/zhonger/docker-squid&quot;&gt;zhonger/squid&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;

&lt;p&gt;  通过浏览器访问 http://ip:3128 并输入对应的用户名和密码可以看到类似下面的内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/nUOnpb.webp&quot; alt=&quot;nUOnpb&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;客户端连接&quot;&gt;客户端连接&lt;/h3&gt;

&lt;p&gt;  由于我们未指定实际需要访问的地址，Squid 会直接报错。一般使用时，需要使用操作系统的网络设置中的代理来配置好 Squid。如下图所示，勾选“网页代理（HTTP）”并填写相关的 IP、端口、用户名及密码。如果想要同样应用在访问 HTTPS 站点，则还需要勾选“安全网页代理（HTTPS）”及填写相关信息。然后点击保存生效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/oXWsLE.webp&quot; alt=&quot;oXWsLE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这样一来就可以将访问的流量完全交给 Squid 来控制了。当然，如果不确定客户端连接是否成功，可以通过访问 &lt;a href=&quot;https://ip.sb&quot;&gt;ip.sb&lt;/a&gt; 来确认当前客户端流量出口 IP 是否为 Squid 服务器 IP。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;Squid cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/Squid_(%E8%BD%AF%E4%BB%B6)&quot;&gt;Squid 软件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 15:00:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-squid.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-squid.html</guid>
        
        <category>LDAP</category>
        
        <category>Squid</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>内网私有域名解析</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;域名和域名解析&quot;&gt;域名和域名解析&lt;/h3&gt;

&lt;p&gt;  大家可能知道，在网络被发明出来之后一段时间，大家采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的方式一起共享资源。后来随着资源越来越多，这样一种方式显得非常不友好。比如说，现在有 254 个 IP，每个 IP 上有 20 个 Web 应用，那么我们就必须记住 5080 个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的组合，简直太折磨人了。于是在 1983 年，保罗・莫卡派乔斯发明了域名解析服务和域名服务（DNS，Domain Name System）。从此以后，大家开始用域名来访问各种各样的应用服务。显然，相比原来 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的方式，域名的含义更加具象、更容易被人记住。&lt;/p&gt;

&lt;p&gt;  域名解析实际上就是把 IP 和一串有意义的字符对应，这是一对多的关系，即一个 IP 可能对应多个域名。域名的管理单位我们称之为域名注册管理机构，他们掌握着顶级域名的管理权利。比如说，.net、.com、.org 就是顶级域名，域名注册管理机构对顶级域名具有完整的权利。就像上次讲到的 SSL 根证书一样，光有域名注册管理机构还是不够的，他们没有办法直接把域名卖给全世界所有的公司或者个人，而是需要域名注册商承担这部分工作。像我们比较熟知的国内的万网（现在阿里云域名）、DNSPod（现在腾讯云域名）等，国外的 Gandi、Godaddy 等，都是域名注册商。顶级域名根据用途不同可以分为，国别域名后缀和通用域名后缀。国别域名后缀就是指定给各个国家或地区使用的，通用域名后缀就是其余的。我们可以在某域名注册商处购买某个域名后缀（也称顶级域名）的子域名（也称二级域名），比如说我们可以购买域名后缀为 .com 的域名 baidu.com（当然 baidu.com 早就被注册了，我们只能购买还未被注册的域名）。由于一些品牌效应，大部分域名后缀都会保留一些子域名，我们一般称之为&lt;strong&gt;溢价域名&lt;/strong&gt;。一般来说，溢价域名也会比普通域名价格更贵。当我们购买了域名之后，域名注册商会免费提供域名解析服务。当然，我们也可以要求使用其他厂商提供的免费或收费域名解析服务，甚至也可自行搭建域名解析服务。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;warning “小提醒”
  国内需具备一定资质才能在公网上搭建域名解析服务，否则会面临警告和阻断的风险。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  为了简便，我们一般把域名解析服务称为 DNS 服务。在操作系统中，53 端口被视为 DNS 服务的标准端口（TCP/UDP 服务），853 端口被视为 DNS over TLS 的标准端口（TCP 服务）。除此之外，DNS over HTTPS（TCP 服务）和 DNS over Quic（新协议，UDP 服务）的标准端口是 443。所以现有能够公开使用的 DNS 服务都采用了标准端口，比如国内著名的 114 DNS、阿里云 DNS、腾讯云 DNS、百度云 DNS 都是如此。如果想要了解更多开放可用的 DNS 服务可以查看 &lt;a href=&quot;https://adguard-dns.io/kb/general/dns-providers/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;note “小知识”
  DNS 按照功能上的不同可以分为 &lt;strong&gt;权威 DNS&lt;/strong&gt; 和 &lt;strong&gt;递归 DNS&lt;/strong&gt;。权威 DNS 负责对某个或多个子域名进行管理，注册商提供的域名解析服务就是这一类。递归 DNS 负责接收客户端的请求并将查询到的域名对应记录返回给客户端，也就是说它本身不对任何子域名进行管理，只转述别人告诉它的结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  当我们使用 DNS 时，它（这里指递归 DNS）会如下图所示按照域名系统的构成逐级进行查询。比如说，现在我们想访问 www.baidu.com：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端（我们）向递归 DNS 请求解析 www.baidu.com；&lt;/li&gt;
  &lt;li&gt;递归 DNS 会先去问一下它的上游 DNS，如果不存在上游 DNS，它就只能去问 DNS 根服务器；&lt;/li&gt;
  &lt;li&gt;DNS 根服务器并不知道具体的解析记录，但是会告诉递归 DNS 顶级域名 .com 的 DNS 服务器；&lt;/li&gt;
  &lt;li&gt;递归 DNS 接着向 .com 的 DNS 服务器询问；&lt;/li&gt;
  &lt;li&gt;结果 .com 的 DNS 服务器也不知道具体的解析记录，但是会告诉递归 DNS 二级域名 baidu.com 的 DNS 服务器；&lt;/li&gt;
  &lt;li&gt;这样递归 DNS 才会去问域名 baidu.com 的权威 DNS；&lt;/li&gt;
  &lt;li&gt;然后，baidu.com 权威 DNS 响应 www.baidu.com 对应的 A 记录（或者 AAAA 记录）是什么；&lt;/li&gt;
  &lt;li&gt;最后，递归 DNS 将解析结果告诉客户端（我们）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/hwyKGH.webp&quot; alt=&quot;域名解析过程 DNS Resolution Process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  那么问题来了，&lt;strong&gt;一个 DNS 能否同时是权威 DNS 和递归 DNS 呢？&lt;/strong&gt;实际上是不可能的，但是可以实现这种效果。如果我们把权威 DNS 隐藏在递归 DNS 的后面，那么对于顶级域名 DNS 来说，你指定的递归 DNS 就是它理解的权威 DNS。这里的隐藏指的是，当有请求询问递归 DNS 的权威解析记录时，递归 DNS 根据规则将请求转发给背后真正的权威 DNS。等待权威 DNS 返回解析记录后，递归 DNS 再把结果返回给请求方（其他递归 DNS 或者客户端）。&lt;/p&gt;

&lt;h3 id=&quot;私有域名解析&quot;&gt;私有域名解析&lt;/h3&gt;

&lt;h4 id=&quot;必要性&quot;&gt;必要性&lt;/h4&gt;

&lt;p&gt;  以上谈到的都是公有域名的相关事情，为什么又要考虑私有域名解析呢？首先，公有域名和私有域名本质上可以没有区别，都是在域名注册商处购买的域名，也可以有所区别，即私有域名是未购买的或者是非 ICANN 支持的域名（比如 .lisz 后缀）。这样一来，我们将不再受&lt;strong&gt;域名是否注册&lt;/strong&gt;的限制而应用在内部网络中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  当然，我们应当避免使用 ICANN 支持的域名后缀且可注册的域名，毕竟可能以后会有人购买这个域名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  其次，解析记录的&lt;strong&gt;内外分离&lt;/strong&gt;需求。随着基础服务架构和应用架构的不断发展，越来越多像云计算、Kubernetes 这样需要采用域名解析来连通内部服务。如果我们直接采用一个权威 DNS 来解析这些记录，那就意味着所有人都可以通过查询来知道这些解析记录，甚至有些人就能大致猜出服务架构，这并不是很安全。出于安全上的考量，将同一个域名的解析记录进行内外分离能够在一定程度上提升安全。&lt;/p&gt;

&lt;p&gt;  如参考资料中《内网域名系统的安全保密风险研究》所说，“随着内网规模的不断扩大，特别是国家电子政务内网的建成、扩展，在电子政务内网中构建国家级可信内网域名体系的需求越来越迫切，内网域名系统会成为内网的核心基础设施，其安全问题将会越来越被关注。”私有域名解析，即内网域名系统在内网安全中发挥着举足轻重的作用。&lt;/p&gt;

&lt;h4 id=&quot;用途&quot;&gt;用途&lt;/h4&gt;

&lt;p&gt;  笔者在实际使用 AWS、Azure、Oracle、阿里云、腾讯云、Ucloud 的过程中，也发现了私有域名解析的应用。举个例子，Oracle 云创建的每一台 VPS 都会有一个内部 FQDN（以 oraclecv.com 为后缀的多级域名）。当你在 VPS 上使用 dig 命令查询这个 FQDN 对应的 A 记录时，VPS 的内网 IP 会被返回。当你在自己的设备上使用 dig 命令查询时，返回为空。再举个例子，云计算厂商的 VPS 默认配置的是他们自家的镜像源，比如腾讯云 VPS 的默认镜像源域名为 mirrors.tencentyun.com，而这个域名在公网上是查不到解析记录的。可见，云计算厂商的架构上也在使用私有域名解析。&lt;/p&gt;

&lt;p&gt;  当然，云计算厂商们也向用户提供依托于 VPC（私有网络）的私有域名解析服务，即该私有域名解析服务只有在同一 VPC 内的 VPS 可以使用。而我们又知道，VPC 是属于用户个人的，也就是说不同用户之间的私有域名解析服务完全互不干扰。&lt;/p&gt;

&lt;p&gt;  在参考资料一中，阿里云列出了实际云服务中私有域名解析的四大应用场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;主机名管理&lt;/strong&gt;：根据用途、机器信息语义化命名，对运维人员更友好。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内部调用 API&lt;/strong&gt;：内部 API 用域名来访问，即使对应集群或者 IP 发生变化，也可以无感切换。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内部域名隐私保护&lt;/strong&gt;：和上面笔者提到的必要性第二点一样，提升隐私保护。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;私有地址反向解析&lt;/strong&gt;：绑定后可以通过 host、traceroute 或其他操作直接识别访问 IP 的来源，便于运维人员排查问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;note “小知识”
  域名解析分为&lt;strong&gt;正向解析&lt;/strong&gt;和&lt;strong&gt;反向解析&lt;/strong&gt;，我们一般见过的“域名 → IP”的域名解析就是正向解析，而反向解析则是“IP → 域名”。一般来说，反向解析多用于邮件服务器的可信认证。将 IP 与 邮件服务器域名的正反向解析都绑定后，能够增强邮件服务器的可信度，降低被收信服务器判定为 &lt;strong&gt;垃圾 IP&lt;/strong&gt; 发信的概率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;方案一&quot;&gt;方案一&lt;/h3&gt;

&lt;p&gt;  内网私有域名解析实际上就是要在内网中搭建一台权威 DNS 和递归 DNS：权威 DNS 用于管理私有域名，递归 DNS 用于解析权威 DNS 记录以及正常的公网解析记录。当然，在公司网络或者机房集群网络中，一般会搭建权威 DNS 集群和递归 DNS 集群来提升可靠性和可用性。权威 DNS 集群通常是主从架构，主节点作为接受域名解析操作的主要接收方，从节点将实时同步主节点记录。当主节点发现故障时，从节点自动升级为主节点。并非所有的集群都是这样，但是这样更加能避免因主节点宕机后无法进行域名解析的更改操作。由于这与采用架设 DNS 服务的软件相关，这里就不作过多探讨。&lt;/p&gt;

&lt;p&gt;  与权威 DNS 集群不同的是，内网递归 DNS 集群实际上一般会有两个节点暴露出来。这一点与公网中提供公网递归 DNS 服务是一样的。比如 114 DNS 会告诉大家要设置两个 DNS IP 地址，即 114.114.114.114 和 114.114.115.115。为什么要这样呢？主要还是因为通过冗余来提高可靠性和可用性。我们可能会简单地以为 114 DNS 就只有这两个 IP，但实际上它们的背后还有很多台递归 DNS 服务器。这两台服务器的作用并不是直接处理解析请求，而是为想要域名解析的客户端提供一个更加快和高效的方式来使用递归 DNS。类似于复杂 Web 系统中首先会在交换机上用网关进行优化，然后在服务器上利用 LVS 来负载均衡，之后再利用多个服务后台来分别处理相同的业务，最后再返回信息给用户。这两台递归 DNS 节点也起到了负载均衡的作用。&lt;/p&gt;

&lt;p&gt;  当然，这两个 IP 也不是一般的 IP，而是使用了 Anycast 技术的 IP。也就是说，在互联网上会有多台服务器使用了这两个 IP，而当我们向这两个 IP 发起请求时，BGP 会根据客户端所处的地理位置和网络情况将 IP 定位到离客户端最近的两台服务器上。有一个比较客观的体验就是，当我们在全国不同地方 ping 这两个 IP 时，发现似乎延迟差不多且都很短。但是无论我们的骨干网建得多么好，因地理位置和跨网（电信、联通、移动、教育网）所带来的延迟也是无法避免的。唯一一个延迟都很短的可能解释就是响应请求的机器实际上并非同一位置的同两台，而是位于不同位置的不同两台。&lt;/p&gt;

&lt;h3 id=&quot;方案二&quot;&gt;方案二&lt;/h3&gt;

&lt;p&gt;  上面的方案考虑的问题比较多，也比较适合在大规模集群或内网中进行实践，但是在小集群中可能就有点过于庞大了，显得没有必要。其实，小集群或者小团队内网可以采用“合二为一”的方案，即递归 DNS 与权威 DNS 由一台服务器来同时提供。由于小集群内网私有域名解析和公有域名解析不需要接近于零的宕机率，所以完全可以最简化。当前最流行的免费解决方案可能就是 AdGuard Home 了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;citation “AdGuard 主页”
  AdGuard Home 是一款全网广告拦截与反跟踪软件。在您将其安装完毕后，它将保护您所有家用设备，同时您不再需要安装任何客户端软件。随着物联网与连接设备的兴起，掌控您自己的整个网络环境变得越来越重要。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  AdGuard Home 之所以这么受到欢迎，主要是因为其丰富的功能和简单的可视化操作，对于管理员来说非常友好。而且，AdGuard Home 的部署也非常简单，支持多平台架构、多方式一键部署，比如 AdGuard Home 也能在 ARM 芯片上用 Docker 容器的方式一键部署。虽然 AdGuard Home 自带简单的解析记录重写，可以满足大部分常用的内网私有域名解析需求，但是像一些比较高级的解析记录可能就无法做到，比如 TXT 记录。尽管 TXT 记录在 &lt;strong&gt;IP&lt;/strong&gt; 和&lt;strong&gt;域名&lt;/strong&gt;的相互映射中并不起到作用，但是 TXT 记录可以填写比较长的内容，非常适合用来验证对于域名的管理权限，像 HTTPS 证书的申请一般就是采用新增 TXT 记录的方式验证，还有 Gitlab Page 的自定义域名绑定也是如此。所以为了提供比较完整的域名解析服务，这里还是建议增加一个权威 DNS，可以采用 PowerDNS + PowerDNS Admin（交互界面）或者 Bind9 等。&lt;/p&gt;

&lt;p&gt;  考虑到友好的交互界面更容易上手使用，这里只介绍 AdGuard Home + PowerDNS 的方案。需要提前准备的环境有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adguard-home&quot;&gt;AdGuard Home&lt;/h3&gt;

&lt;p&gt;  由于 AdGuard Home 官方已经提供了多平台架构的 Docker 镜像，我们直接使用即可，docker-compose.yml 文件如下所示：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adgurad&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;adguard/adguardhome&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;53:53/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;53:53/udp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;443:443/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000:3000/tcp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./work:/opt/adguardhome/work&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./conf:/opt/adguardhome/conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动 AdGuard Home 实例。&lt;/p&gt;

&lt;h4 id=&quot;初始化&quot;&gt;初始化&lt;/h4&gt;

&lt;p&gt;  使用浏览器访问 &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; 进行实例初始化设置，如下所示根据页面提示设置好用户名和密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/PreFoj.webp&quot; alt=&quot;初始化 AdGuard Home Initial&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/7LHDlg.webp&quot; alt=&quot;确认端口 Check ports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/qjTNW8.webp&quot; alt=&quot;设置管理员 Set Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/yLkLc4.webp&quot; alt=&quot;客户端配置指南 Client setting guideline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/buQ6LT.webp&quot; alt=&quot;完成初始化 Finish the initialization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  初始化成功后，页面会自动跳转到登录界面 &lt;a href=&quot;http://localhost&quot;&gt;http://localhost&lt;/a&gt;（80 端口）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  由于在实际环境中，我们不一定是在本机启动该实例，所以可能需要使用服务器的 IP 来替代 localhost 访问。另外，如果原来就有 Nginx 或其他服务占用了 80 端口，我们在配置端口映射的时候可能就会设置到另外一个端口，因此自动跳转到的页面并非是 AdGuard Home 的首页。我们需要使用 IP + 映射 80 的端口来定位到首页。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Wwb5At.webp&quot; alt=&quot;登录页面 AdGuard Home Login&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;私有域名转发&quot;&gt;私有域名转发&lt;/h4&gt;

&lt;p&gt;  由于接下来我们将要用 PowerDNS 来管理权威域名解析，所以需要设置私有域名规则，即当 AdGuard Home 收到关于内网自定义权威域名的请求时，就会把请求转给 PowerDNS。这在 AdGuard Home 中也是比较容易就能设置好的，如下图所示，添加一行规则使得匹配的所有二级域名请求转发给 PowerDNS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/4GMZAO.webp&quot; alt=&quot;配置转发 Redirect to Authroized DNS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;powerdns&quot;&gt;PowerDNS&lt;/h3&gt;

&lt;p&gt;  虽然 PowerDNS 和 PowerDNS-Admin 官方都提供了 Docker 镜像，但是搭配起来用还是有点莫名其妙的问题。为了更加简单，笔者参考官方自行构建了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/pdns&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/powerdns-admin&lt;/code&gt; 两个 Docker 镜像，搭配使用更加便捷可用。如果想要了解更多，可以查看 &lt;a href=&quot;../docker/powerdns.html&quot;&gt;《Docker 镜像构建之 PowerDNS 篇》&lt;/a&gt;。
  &lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pdns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/pdns:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;753:53/tcp&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;753:53/udp&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - &quot;8081:8081&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_launch=gsqlite3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_gsqlite3_database=/var/lib/powerdns/pdns.sqlite3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_webserver_address=0.0.0.0&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_webserver_allow_from=127.0.0.1,10.0.0.0/8,172.0.0.0/8,192.168.0.0/16&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_api=yes&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_api_key={Random Long String}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./powerdns:/var/lib/powerdns&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD=yes&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_DATABASE=powerdnsadmin&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_USER=pdns&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_PASSWORD=mypdns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./pda-mysql:/var/lib/mysql&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/powerdns-admin:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pdns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:80&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;json-file&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max-size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;50m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQLALCHEMY_DATABASE_URI=mysql://pdns:mypdns@db/powerdnsadmin&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_TIMEOUT=60&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_WORKERS=2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_LOGLEVEL=DEBUG&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OFFLINE_MODE=False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# True for offline, False for external resources &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动 PowerDNS 和 PowerDNS-Admin 实例。&lt;/p&gt;

&lt;h4 id=&quot;初始化用户&quot;&gt;初始化用户&lt;/h4&gt;

&lt;p&gt;  PowerDNS-Admin 本身不会自动初始化管理员用户，而是将注册的第一个用户认定为管理员用户。使用浏览器访问 PowerDNS-Admin 登录页面 &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;，如下图所示点击 Create an account 链接跳转到注册页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/9NDNpc.webp&quot; alt=&quot;PowerDNS-Admin 登录页 Login page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如下图所示，填写姓名、邮箱、用户名和密码，点击 Register 按钮即可完成注册。这里，PowerDNS-Admin 默认采用邮箱的 Gavatar 头像作为用户头像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/TJqhDE.webp&quot; alt=&quot;PowerDNS-Admin 注册页 Register page&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;初始化配置&quot;&gt;初始化配置&lt;/h4&gt;

&lt;p&gt;  注册和登录后，会跳转到 PDNS 配置页面。这里由于 PDNS 和 PowerDNS-Admin 实例是在同一个网络中，可以直接使用 pdns 来代替 PDNS 实例的 IP 地址。PDNS API KEY 则是刚才启动时设置的那一长串字符（PDNS_api_key）。PDNS VERSION 最好是与 PDNS 实际使用的一致，不过不一致也不会有什么事。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/pdns:latest&lt;/code&gt; 目前实际是 4.6 版本，这里默认填的 4.1.1 也可以。然后点击 Update 按钮保存配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/CJ1Wl1.webp&quot; alt=&quot;CJ1Wl1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  保存配置成功后，如果填写信息无误，点击侧边导航中的 PDNS 就可以看到 PDNS 的各项配置信息。如果填写有误，则没有任何信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/UdkXGi.webp&quot; alt=&quot;UdkXGi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;新增域名&quot;&gt;新增域名&lt;/h4&gt;

&lt;p&gt;  接下来就可以点击侧边导航栏中的 New Domain 来新增私有域名 home.lisz。如下图所示，我们需要填写的是域名，需要选择的是域名模板，一般 basic_template_1 即可。之后点击 Submit 按钮提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/nMyRKR.webp&quot; alt=&quot;nMyRKR&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;新增解析记录&quot;&gt;新增解析记录&lt;/h4&gt;

&lt;p&gt;  新增域名成功后，我们就可以在 Dashboard 里面的域名列表看到 home.lisz 了。点击即可进入域名解析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/naFe9s.webp&quot; alt=&quot;naFe9s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里我们以一个 CNAME 和 A 记录为例，来尝试新增解析记录。如下图所示，点击左上角的 Add Record 添加记录，完成后点击右上角的 Apply Changes 来提交解析记录到 PDNS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/SmwtCT.webp&quot; alt=&quot;SmwtCT&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;note “小知识”
  实际域名解析时我们一般会采用 CNAME 和 A 记录联合使用的方式，这样相当于在 DNS 解析层面就有负载均衡了。A 记录是域名与 IP 的关系，这就意味着同一个域名可以有多个 A 记录。CNAME 记录是域名与域名的关系，而两个域名分别是为了不同的目的，前一个是为了给大家使用的，后一个是为了运维人员使用的。当存在 CNAME → A 时，客户端会根据网络情况来判断使用哪一条 A 记录对应的 IP，从而提升用户体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;

&lt;h4 id=&quot;验证权威-dns-是否正常&quot;&gt;验证权威 DNS 是否正常&lt;/h4&gt;

&lt;p&gt;  如下所示向 AdGuard Home 询问私有域名解析记录，解析正常。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.home.lisz

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.18.1-1ubuntu1.1-Ubuntu &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.home.lisz
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 server found&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 47193
;; flags: qr aa rd; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;www.home.lisz.                 IN      A

;; ANSWER SECTION:
www.home.lisz.          60      IN      CNAME   www101.home.lisz.
www101.home.lisz.       60      IN      A       192.168.1.1

;; Query time: 20 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Tue Aug 23 17:05:15 JST 2022
;; MSG SIZE  rcvd: 79
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;验证递归-dns-是否正常&quot;&gt;验证递归 DNS 是否正常&lt;/h4&gt;

&lt;p&gt;  如下所示，向 AdGuard Home 询问公有域名解析记录，解析正常。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.baidu.com

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.18.1-1ubuntu1.1-Ubuntu &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.baidu.com
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 server found&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 8988
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;www.baidu.com.                 IN      A

;; ANSWER SECTION:
www.baidu.com.          831     IN      CNAME   www.a.shifen.com.
www.a.shifen.com.       28      IN      CNAME   www.wshifen.com.
www.wshifen.com.        192     IN      A       45.113.192.102
www.wshifen.com.        192     IN      A       45.113.192.101

;; Query time: 244 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Tue Aug 23 17:06:03 JST 2022
;; MSG SIZE  rcvd: 127
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/64623.html&quot;&gt;阿里云帮助中心 - 云解析 - 应用场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/1338/50547&quot;&gt;腾讯云文档中心 - 子域名递归解析说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.huaweicloud.com/dns_faq/dns_faq_040.html&quot;&gt;华为云文档 - 如何设置内网域名既支持内网解析，也支持公网解析？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1123748&quot;&gt;公司内网搭建代理 DNS 使用内网域名代替 ip 地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1821030&quot;&gt;一文搞懂 DNS 基础知识，收藏起来有备无患~&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1691018&quot;&gt;搞它！！！深入了解DNS域名解析服务，教你搭建一个属于自己的DNS服务器（正向解析、反向解析、泛域名解析、邮件交换解析、别名解析、分离解析，主从结构解析）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.modb.pro/db/433331&quot;&gt;推荐一款 Private DNS 服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/63088&quot;&gt;AdGuard Home 安装及使用指北&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gjbmj.gov.cn/n1/2021/0722/c411145-32166624.html&quot;&gt;内网域名系统的安全保密风险研究&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://computingforgeeks.com/running-powerdns-and-powerdns-admin-in-docker-containers/&quot;&gt;Running PowerDNS and PowerDNS Admin in Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 04 Aug 2022 11:30:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/internal-dns.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/internal-dns.html</guid>
        
        <category>域名解析</category>
        
        <category>DNS</category>
        
        <category>私有域名</category>
        
        <category>内网</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>内网 HTTPS 可信证书</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;内网-https-化的必要性&quot;&gt;内网 HTTPS 化的必要性&lt;/h3&gt;

&lt;p&gt;  开发团队或者公司内部一般会采用内外网隔离、上网行为过滤等措施，比较可靠地保证了内部设备无法被外部网络所侦测，从而可能认为 HTTP 内网站点是一个相对安全的存在。即使在 HTTPS 证书如此盛行的今天，也还暂时不考虑内部站点的 HTTPS 化。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://本地域名&lt;/code&gt; 的访问方式依旧是座上宾。当然，如果考虑到购买 HTTPS 证书的成本或者团队内网站点采用 Letsencrypt 等免费证书过于麻烦（只能采用 DNS 验证的方式每三个月申请一次新证书），那么自签名 SSL 证书则成为首选了。不过，如果为每一个内网站点都生成一个 SSL 证书，然后让大家都手动把 HTTPS 标为可信，那么当面临大量内网站点时，大家可能要被搞崩溃。更为可行的办法是，&lt;strong&gt;生成一个内网用的根证书，只标记该根证书可信&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;根证书&quot;&gt;根证书&lt;/h3&gt;

&lt;p&gt;  与其相信别人根证书生成的 SSL 证书，不如相信自己根证书生成的。我们的目的毕竟不是要任何一个人都把我们自签名的证书标为可信，只要在内网内使用内网站点的设备能够信任即可。而且成为一个受到公众信任的根证书是非常困难的一件事，即使经过几十年可能也没有办法做到。如今现有的根证书实际上有限，像我们平常熟悉的 Letsencrypt、ZeroSSL、Cloudflare 等等并不是根证书而是中间证书。有点类似总代理和分代理的感觉，根证书在业界具有广泛的公信力，但是让根证书去给个人或者企业生成证书可能有点忙不过来。于是根证书生成若干个中间证书，再由中间证书来为个人或者企业生成实际的证书。&lt;/p&gt;

&lt;p&gt;  一般来说，操作系统或浏览器的产商会预置国际上认可的根证书。如下所示，为 Mac OS 上预置的根证书列表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/SfWsIJ.webp&quot; alt=&quot;Mac OS 预置根证书 Root Certificate&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  话不多说，让我们来实践一下如何生成自己的根证书和签发 SSL 证书吧。&lt;/p&gt;

&lt;h3 id=&quot;生成根证书&quot;&gt;生成根证书&lt;/h3&gt;

&lt;h4 id=&quot;安装-openssl-可选&quot;&gt;安装 OpenSSL (可选)&lt;/h4&gt;

&lt;p&gt;  此处只考虑 Mac OS 和 Ubuntu，其他环境如何安装可以自行搜索。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Mac OS&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openssl

&lt;span class=&quot;c&quot;&gt;# Ubuntu&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;创建根密钥&quot;&gt;创建根密钥&lt;/h4&gt;

&lt;p&gt;  使用以下命令创建根密钥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger-key.pem&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; zhonger-key.pem 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;创建根证书并签名&quot;&gt;创建根证书并签名&lt;/h4&gt;

&lt;p&gt;  使用刚创建好的根密钥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger-key.pem&lt;/code&gt; 生成根证书，并输入相关信息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 3600 &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; zhonger-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; zhongerca.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 3600 &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; zhonger-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; zhongerca.pem 
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&quot;s1&quot;&gt;&apos;.&apos;&lt;/span&gt;, the field will be left blank.
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AU]:CN
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Some-State]:Shanghai
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:Shanghai
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd]:zhonger
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:zhonger
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:lisz.me
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:contact@lisz.me
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;验证根证书&quot;&gt;验证根证书&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; zhongerca.pem &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;
Certificate:
    Data:
        Version: 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        Serial Number:
            44:48:03:56:ff:15:57:03:00:34:1f:85:61:ca:f7:7a:1e:4f:38:8f
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CN, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Shanghai, L &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Shanghai, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zhonger, OU &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zhonger, CN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lisz.me, emailAddress &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; contact@lisz.me
        Validity
            Not Before: Aug  3 05:25:47 2022 GMT
            Not After : Jun 11 05:25:47 2032 GMT
        Subject: C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CN, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Shanghai, L &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Shanghai, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zhonger, OU &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zhonger, CN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lisz.me, emailAddress &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; contact@lisz.me
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4096 bit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                Modulus:
                    00:b2:d1:47:73:8a:83:48:e3:47:1a:41:01:f6:63:
                    69:43:39:71:eb:2b:74:be:dc:63:f3:df:79:66:ee:
                    00:30:65:b3:4f:7e:58:88:00:13:09:e6:4f:74:57:
                    fa:a3:56:24:cd:b6:1f:53:25:77:98:bf:9f:45:64:
                    7c:6c:04:23:c4:8f:0f:bf:2e:b3:d1:2e:4c:05:4d:
                    4c:e6:65:54:ad:0c:35:b7:d9:c8:74:97:19:c7:a5:
                    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;:9a:a4:73:37:13:71:80:34:7c:bc:b3:41:5a:34:
                    bb:16:82:44:18:a1:0a:a5:f5:f1:07:ca:8d:b3:9a:
                    ef:74:fb:a0:6c:72:4a:53:5c:59:74:6f:aa:c7:bc:
                    48:26:af:1b:70:f3:5f:7f:c7:df:8d:e5:da:e4:f4:
                    d2:fa:90:d3:e2:67:e1:9a:df:c7:c4:c7:53:6f:62:
                    25:ed:ff:0a:17:cf:8d:4d:84:6b:38:cb:49:e7:3d:
                    c5:2b:15:76:e6:eb:cc:17:94:40:20:7d:ee:8c:36:
                    6d:cf:9c:d7:1f:a6:41:20:9d:45:cd:57:8f:a8:61:
                    f8:8b:e9:31:6a:a9:96:c1:db:57:64:0b:09:da:ca:
                    b3:07:d9:55:ed:fe:69:a0:9c:78:5b:59:a5:7b:a1:
                    2b:4d:68:22:b4:7f:db:c6:c1:12:ee:eb:9b:29:38:
                    ae:7b:4c:0d:2a:ab:33:3f:af:a8:7b:ca:89:2c:62:
                    0f:a8:ef:89:60:9e:fd:a2:df:36:6d:70:82:8b:fa:
                    b3:ee:79:7e:fd:3f:e7:90:84:58:85:7e:7e:69:07:
                    1e:50:05:0b:87:4d:66:e4:17:6b:c2:97:03:48:e4:
                    7d:08:b4:81:a6:05:80:60:5c:eb:8d:53:db:7c:62:
                    a8:6d:a7:75:f1:56:b6:d9:0d:6b:3b:be:8b:72:39:
                    8d:e7:2d:77:74:e3:4d:a1:fd:8b:44:f9:ee:fd:0d:
                    04:ec:6a:fc:f3:d2:15:fc:18:ff:7d:33:44:2b:6d:
                    7f:3c:33:21:e1:d8:5f:08:fa:53:fd:26:fb:6e:74:
                    d7:4b:51:62:d3:15:1b:3b:44:78:78:9b:91:c7:ba:
                    82:2b:12:d7:b2:83:0a:39:ec:5e:a9:a9:c1:04:a6:
                    2e:64:a5:ea:15:c3:85:e9:ac:38:6b:22:eb:3b:08:
                    b8:0a:31:10:df:45:1d:76:81:e0:0f:88:e4:00:ef:
                    6e:90:59:8c:d8:36:e9:77:bf:4a:0e:3d:03:02:4d:
                    5d:a7:90:16:81:11:e0:81:bb:e0:18:a3:bb:dc:8d:
                    7d:c6:cf:c6:0b:d2:80:53:ea:d0:27:e6:6a:cc:8e:
                    2b:b3:72:e4:ab:84:88:e2:e9:a5:bb:72:9a:c6:a2:
                    0e:5a:cb
                Exponent: 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x10001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                EE:EF:AE:DB:73:45:9A:6E:82:00:3C:A7:05:0D:60:E4:20:81:3B:02
            X509v3 Authority Key Identifier:
                keyid:EE:EF:AE:DB:73:45:9A:6E:82:00:3C:A7:05:0D:60:E4:20:81:3B:02

            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
         98:cf:f4:23:61:d2:2a:64:ce:51:57:1d:fb:61:2f:34:68:86:
         c9:02:5a:c8:97:80:58:c1:7f:04:e1:97:f5:0b:35:d5:c4:91:
         fa:98:8c:73:16:43:b3:af:63:af:2c:30:cf:6a:8e:10:99:bc:
         fd:3d:84:c7:3d:01:e0:8d:8d:d8:76:74:12:69:1a:f5:e5:ec:
         ef:eb:dc:f8:08:0c:c7:03:19:de:c5:e8:c7:4e:b4:5c:67:39:
         9f:33:11:6f:29:e1:03:d8:4e:70:09:7a:69:bd:3a:db:96:71:
         2b:38:c4:46:87:f6:59:34:f9:dc:5c:6d:34:9a:ba:ea:36:13:
         d8:e3:e3:91:ea:70:3b:ea:39:cb:fc:fd:08:0f:73:e5:16:c3:
         0d:9a:62:20:3f:5a:28:90:e6:b2:65:23:a1:ba:d0:77:c0:8e:
         16:51:55:44:f6:4b:16:b9:a1:97:bc:f8:95:70:af:a6:d4:07:
         27:21:96:78:0b:58:18:51:45:a6:ea:07:c8:09:1b:ad:f3:e1:
         16:be:64:bf:8f:b7:4c:d1:e6:d0:c6:c1:db:cd:3d:e9:88:ec:
         e2:87:ff:bd:c3:7b:31:23:00:c3:71:53:90:68:46:99:7d:1d:
         e1:78:26:76:6a:41:8d:9e:9a:55:97:63:a5:df:86:fc:03:9b:
         28:13:55:ff:74:f2:56:d9:20:02:e8:c9:90:4f:b1:5d:1b:66:
         57:4e:f7:c6:50:4f:c9:8b:ff:39:a1:9e:b4:ee:2b:8a:bf:46:
         b4:3e:65:cb:34:12:73:bc:ae:ba:a5:41:20:d4:b9:c5:c4:da:
         89:bd:50:83:27:71:7a:9f:2c:3e:cf:de:db:13:b1:39:cf:4a:
         39:62:68:b3:f5:dc:49:44:3e:c1:cf:0c:a4:9a:4b:cb:5e:ec:
         aa:33:a5:57:ae:c6:f3:4f:69:01:d1:6a:a7:12:90:88:05:e9:
         18:d8:3a:a7:89:70:55:ab:18:ba:4f:28:74:5b:5f:21:8e:66:
         bc:ae:ff:1b:c7:ed:42:73:c1:1c:a4:97:f2:e6:c7:5a:8f:a8:
         44:a5:ed:b7:76:ac:cf:40:f0:a4:4f:22:03:d0:db:db:6e:18:
         32:33:4a:79:c2:bb:98:20:71:03:a7:9c:ea:4e:7e:0a:28:79:
         30:f3:3f:ef:03:b2:e0:00:b0:2b:71:27:8b:fc:f9:a0:e5:b9:
         a0:9e:6f:93:3a:f3:d3:1c:87:8a:b7:2d:5c:38:ab:f9:ff:39:
         8b:52:a5:9a:95:2f:a0:82:b9:b6:f8:9a:c3:e3:55:dd:4b:b5:
         e4:e3:fb:f8:8b:10:50:f8:42:7d:03:fe:72:40:c1:d3:f7:26:
         a7:f9:de:b9:9d:30:26:94
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;安装根证书&quot;&gt;安装根证书&lt;/h4&gt;

&lt;p&gt;  首次打开刚刚生成的根证书 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhongerca.pem&lt;/code&gt; 会像下面这样显示“此根证书不被信任”，我们可以将下面的使用此证书时的&lt;strong&gt;使用系统默认&lt;/strong&gt;改成&lt;strong&gt;始终信任&lt;/strong&gt;，然后输入操作系统用户密码即可保存修改。改完之后再次打开如下下图所示，显示“此证书已标记为受此账户信任”。这样一来，由该根证书签发的证书就都会被信任了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/gkni75.webp&quot; alt=&quot;打开根证书 Open Root Certificate file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/zJ5dNm.webp&quot; alt=&quot;始终信任根证书 Always trust Root Certificate file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;签发证书&quot;&gt;签发证书&lt;/h3&gt;

&lt;p&gt;  这里我们打算采用 &lt;a href=&quot;https://github.com/jsha/minica&quot;&gt;jsha/minica&lt;/a&gt; 来辅助快速签发证书。&lt;/p&gt;

&lt;h4 id=&quot;安装-minica&quot;&gt;安装 minica&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Mac OS&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;minica

&lt;span class=&quot;c&quot;&gt;# Other OS&lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;github.com/jsha/minica@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;签发-ssl-证书&quot;&gt;签发 SSL 证书&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 给域名签发 SSL 证书&lt;/span&gt;
minica &lt;span class=&quot;nt&quot;&gt;-ca-cert&lt;/span&gt; zhongerca.pem &lt;span class=&quot;nt&quot;&gt;-ca-key&lt;/span&gt; zhonger-key.pem &lt;span class=&quot;nt&quot;&gt;--domains&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sni.lisz.me,zhonger.io,*.zhonger.io&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 给 IP 签发 SSL 证书&lt;/span&gt;
minica &lt;span class=&quot;nt&quot;&gt;-ca-cert&lt;/span&gt; zhongerca.pem &lt;span class=&quot;nt&quot;&gt;-ca-key&lt;/span&gt; zhonger-key.pem &lt;span class=&quot;nt&quot;&gt;--ip-addresses&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  minica 提供了非常简单的方式来签发 SSL 证书，比如说指定根证书和根密钥、指定单个或多个域名、通配符域名以及 IP。minica 签发的证书默认时效为 2年30天（相信可能是考虑到 30天 的缓冲期所以多了一个月）。这里，我们模仿了 Cloudflare 的 SSL 证书生成方式，第一个域名是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sni.根证书域名&lt;/code&gt;，第二个开始才是真正想要签发的域名。由于 minica 默认会将第一个域名作为文件夹的名字生成 SSL 证书 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert.pem&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key.pem&lt;/code&gt; 文件，如果采取这种方式在同一目录执行以上签发命令势必会使得旧文件被覆盖，因此推荐像 Certonly 或者 acme.sh 那样修改目录名来区分。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;mkcert&quot;&gt;mkcert&lt;/h3&gt;

&lt;p&gt;  除了 minica 之外，&lt;a href=&quot;https://github.com/FiloSottile/mkcert&quot;&gt;FiloSottile/mkcert&lt;/a&gt; 提供的 mkcert 工具也非常简单方便。mkcert 会自行生成根证书，然后签发证书。个人觉得，相比 minica 而言，mkcert 更适合个人本地开发 HTTPS 化，而非团队内网 HTTPS 化。&lt;/p&gt;

&lt;h3 id=&quot;根证书被伪造&quot;&gt;根证书被伪造&lt;/h3&gt;

&lt;p&gt;  自生成根证书比较令人担心的地方可能就是任何人都可以用同样的方法伪造出相似的根证书。实际上，根证书是独一无二的，即使所有的信息都设置成一样，还是两个根证书。我们需要做的是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保护好根证书密钥，因为采用同一个密钥是可以生成比较相似的根证书的。当然两个根证书的&lt;strong&gt;序列 ID&lt;/strong&gt;、&lt;strong&gt;有效时间&lt;/strong&gt;是不会完全一样的。如果密钥不同，自然两个根证书的密钥 ID 也不会相同。&lt;/li&gt;
  &lt;li&gt;告诉用户真的根证书是什么样的（序列 ID、密钥 ID、有效时间等）、应该从哪里下载到。这里需要在内网建立一个用于提供下载根证书的站点，而这个站点的SSL 证书最好采用购买的或申请的证书。也就是说，从可靠站点下载的内网 HTTPS 化根证书也是可靠的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  如下所示，是上面生成的根证书和签发的 SSL 证书的密钥 ID 对比。可以看到，两者完全一样，即可信任的 SSL 证书。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/9ieYYm.webp&quot; alt=&quot;根证书密钥 ID Root Certificate Key ID&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/sMYzVn.webp&quot; alt=&quot;SSL 证书密钥 ID the Key ID in SSL Certificate&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他平台安装根证书&quot;&gt;其他平台安装根证书&lt;/h3&gt;

&lt;p&gt;  上面已经提到了在 Mac OS 中如何安装根证书，其他平台比如 Windows、Linux、Android、IOS 等也是可以按照类似的方式，略微有些差别。考虑到 Windows 和 Linux 桌面版安装根证书的步骤几乎与 Mac OS 一样就不再赘述，这里主要讲一下 Linux Server、Android、IOS 平台的安装方法。&lt;/p&gt;

&lt;h4 id=&quot;linux-server&quot;&gt;Linux Server&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;zhongerca.pem /usr/local/share/ca-certificates/zhongerca.pem
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;android-或-harmonyos&quot;&gt;Android 或 HarmonyOS&lt;/h4&gt;

&lt;p&gt;  以华为鸿蒙系统（HarmonyOS）为例，首先下载根证书到设备上，然后在 &lt;strong&gt;设置 &amp;gt; 安全 &amp;gt; 更多安全设置 &amp;gt; 加密和凭据 &amp;gt; 从存储设备上安装&lt;/strong&gt; 中选择已下载的根证书完成安装。安装完成之后可以在同级别的 &lt;strong&gt;受信任的凭据 &amp;gt; 用户&lt;/strong&gt; 下面看到安装好的根证书。&lt;/p&gt;

&lt;h4 id=&quot;ios-或-ipad-os&quot;&gt;IOS 或 iPad OS&lt;/h4&gt;

&lt;p&gt;  首先下载根证书到设备上，在&lt;strong&gt;文件&lt;/strong&gt;中点击打开（会自动跳转到 &lt;strong&gt;设置 &amp;gt; 通用 &amp;gt; VPN与设备管理&lt;/strong&gt;）。可以在 &lt;strong&gt;配置描述文件&lt;/strong&gt; 列表中看到根证书，点击进去&lt;strong&gt;输入密码并验证&lt;/strong&gt;即可。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1458151&quot;&gt;根证书和中间证书的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/azure/application-gateway/self-signed-certificates&quot;&gt;使用自定义根 CA 生成 Azure 应用程序网关自签名证书&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/k_kind/items/b87777efa3d29dcc4467&quot;&gt;開発環境を https 化する mkcert の仕組み&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/379501905&quot;&gt;mkcert 使用指南：如何快速创建自签名 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Aug 2022 11:30:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ca-ssl.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ca-ssl.html</guid>
        
        <category>CA</category>
        
        <category>SSL</category>
        
        <category>证书</category>
        
        <category>内网</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 Nextcloud 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;nextcloud-vs-owncloud&quot;&gt;Nextcloud vs ownCloud&lt;/h3&gt;

&lt;p&gt;  &lt;a href=&quot;https://nextcloud.com&quot;&gt;Nextcloud&lt;/a&gt; 是一款非常适合个人或者团队使用的开源网盘软件，也有一款和其名字非常相似的 &lt;a href=&quot;https://owncloud.com&quot;&gt;ownCloud&lt;/a&gt;。实际上这两款开源网盘是出自一个人之手，只不过在发展的过程中（2016年），ownCloud 团队内部产生了一些意见分歧，造成了核心开发人员出走创建了 Nextcloud。与 ownCloud 相比，Nextcloud 更加在乎宽广的功能多样性以及安全性，比如说视频会议、在线协作、提供对密码暴力破解的保护、限制密码错误登录的次数等。ownCloud 中可能也有这些功能，但并不包含在开源版本中，而是需要企业订阅版本才能享受这些功能。从这些看来，Nextcloud 似乎更加适合个人或团队使用。&lt;/p&gt;

&lt;p&gt;  据笔者所知，国内 F 搜团队所提供的网盘文档-&lt;a href=&quot;https:/fdocs.cn&quot;&gt;F 文档&lt;/a&gt; 实际上就是用 Nextcloud 搭建的。其提供的在线文档编辑采用的是开源的 &lt;a href=&quot;https://www.onlyoffice.com&quot;&gt;OnlyOffice&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;nextcloud-vs-seafile&quot;&gt;Nextcloud vs Seafile&lt;/h3&gt;

&lt;p&gt;  除了 Nextcloud，国内也有一款也比较好用的开源网盘 &lt;a href=&quot;https://www.seafile.com&quot;&gt;Seafile&lt;/a&gt;。Nextcloud 与 Seafile 虽然都是网盘，但是关注点不大一样。正如上面讲到的 Nextcloud 更在乎协作、功能多样化，而 Seafile 则更在乎稳定和安全。举个例子，Nextcloud 如果不设置服务端加密，所有的文件都会直接存在文件系统中。如果可以访问服务器的文件系统，那么意味着无须任何用户自身的许可就可以查看所有文件。Seafile 默认就将所有文件都分成小块存储，这样一来你是无法直接通过服务器的文件系统读取文件内容的。当然，这样分块存储也有一个好处，在客户端设置同步时会分块进行增量同步，提升了同步的速度和可靠性。不至于一个几个 G 的大文件传到一半中断后又要从头开始上传。不过，这样也有一个比较明显的坏处，如果不借助 Seafile 或其支持团队的帮助，无法自行从分块数据恢复原始文件内容。&lt;/p&gt;

&lt;h3 id=&quot;ldap-认证集成&quot;&gt;LDAP 认证集成&lt;/h3&gt;

&lt;p&gt;  从 Nextcloud、ownCloud、Seafile 的官网来看，三者都支持 LDAP/AD 认证集成，但实际上 Seafile 是需要专业版订阅才能有这个功能的，包括 Office 文件预览和编辑、全文检索、断点续传等功能也是需要专业版订阅的。Nextcloud 和 ownCloud 都在开源版本提供了 LDAP 认证集成功能。所以这里也不考虑 Seafile，只以 Nextcloud 为例介绍 LDAP 集成到网盘中。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  由于之前笔者也曾写过&lt;a href=&quot;../docker/nextcloud.html&quot;&gt;《Nextcloud 搭建自己的云盘》&lt;/a&gt;和&lt;a href=&quot;nextcloud-upgrade.html&quot;&gt;《Nextcloud 升级那些事儿》&lt;/a&gt;两篇文章介绍如何安装和升级 Nextcloud ，所以这里就不再对此进行赘述了。当前开始的环境即是已正常运行的 Nextcloud 实例。&lt;/p&gt;

&lt;h3 id=&quot;启用-ldap-插件&quot;&gt;启用 LDAP 插件&lt;/h3&gt;

&lt;p&gt;  在 Nextcloud 的&lt;strong&gt;应用捆绑包&lt;/strong&gt;的&lt;strong&gt;企业捆绑包&lt;/strong&gt;里就有我们想要用的 LDAP 认证集成插件，点击右侧&lt;strong&gt;启用&lt;/strong&gt;按钮即可正常启用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/nFyWzS.webp&quot; alt=&quot;nFyWzS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-ldap-连接&quot;&gt;配置 LDAP 连接&lt;/h3&gt;

&lt;p&gt;  在启用 LDAP 插件后，我们就可以在管理员的设置中看见相应的选项。如下图所示，点击用户头像弹出菜单中的&lt;strong&gt;设置&lt;/strong&gt;链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/8FCrL0.webp&quot; alt=&quot;8FCrL0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  由于这个设置会同时包含个人用户设置和管理员设置，可以将左侧的导航栏往下拉，看到&lt;strong&gt;管理&lt;/strong&gt;中的 &lt;strong&gt;LDAP/AD 集成&lt;/strong&gt; 点击进入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/WiwcTt.webp&quot; alt=&quot;WiwcTt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  下面是 LDAP/AD 集成的基本设置，主要填写四个信息：LDAP 服务器地址、LDAP 管理员 DN、LDAP 管理员密码、查询基础 DN。由于此处填写的是非真实信息，所以下面会显示&lt;strong&gt;配置错误&lt;/strong&gt;的提示。如果填写的 LDAP 信息无误，会自动变成&lt;strong&gt;配置成功&lt;/strong&gt;的提示。然后点击&lt;strong&gt;继续&lt;/strong&gt;按钮，后面的设置可以保留默认选项即可。当然如果 LDAP 服务与一般的设置有些不同，也要根据实际情况对后面的用户、登录属性、群组信息进行调整，这里就不一一介绍了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Lr00tl.webp&quot; alt=&quot;Lr00tl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  以上配置均完成之后，即可退出登录即可使用 LDAP 账户和密码登录验证是否配置成功（登录界面不会有任何改变）。&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;  可能和 Gitlab 的情况有点类似，Nextcloud 本身就有用户体系，然后才接入的 LDAP 认证。其实，我们还是希望 LDAP 用户和原有用户能够自动识别成同一用户，无感完成合并。这里 Nextcloud 和 Gitlab 一样都是凭借着邮箱来判断的。当 LDAP 用户邮箱与 Nextcloud 原有用户邮箱一致时，自动合并成一个用户，并且不再拥有修改用户密码的权利。虽然已经集成了 LDAP 认证，但是我们依然可以用 Nextcloud 自身的用户体系去创建新用户，这其实也是两个用户体系、一个软件系统。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.gandi.net/zh-hans/2021/05/nextcloud-vs-owncloud-which-cloud-solution-should-you-choose/&quot;&gt;Nextcloud vs ownCloud? 该选择哪一个云端代管方案呢？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wzfou.com/nextcloud-seafile/&quot;&gt;NextCloud与Seafile对比使用-NextCloud各项全能 Seafile优势突出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Jun 2022 14:40:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-nextcloud.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-nextcloud.html</guid>
        
        <category>LDAP</category>
        
        <category>Nextcloud</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 Gitlab 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Gitlab 是一款对标 Github 的开源 Git 管理软件，能够为用户提供非常丰富的功能。因为之前写过的&lt;a href=&quot;../tech/docker/gitlab.html&quot;&gt;《私有代码托管平台的搭建与运维》&lt;/a&gt;和&lt;a href=&quot;./gitlab-upgrade.html&quot;&gt;《Gitlab 升级那些事儿》&lt;/a&gt;已经对 Gitlab 作了比较详细的介绍，这里就不多赘述了。&lt;/p&gt;

&lt;h3 id=&quot;国内高校-gitlab&quot;&gt;国内高校 Gitlab&lt;/h3&gt;

&lt;p&gt;  Gitlab 提供了对于多种认证方式的支持，包括自带的用户体系、LDAP、CAS、OAuth 2.0 及其他第三方认证方式。这也为我们实现不同的用户需求提供了可能。国内高校中，中科大和南京大学都为本校生提供了基于 Gitlab 的代码托管服务，访问地址如下。唯一不同的是，中科大采用的社区版本（CE），南京大学采用的是由 Gitlab 在中国的子公司极狐支持的企业版本（EE），据说有一些更先进的功能。当然，考虑到使用 Gitlab 的主要需求是代码托管，而非 Gitlab Pages 功能，两家都没有提供该功能。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;学校&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Git URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;中科大&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://git.lug.ustc.edu.cn&quot;&gt;https://git.lug.ustc.edu.cn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;南京大学&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://git.nju.edu.cn&quot;&gt;https://git.nju.edu.cn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;  言归正传，中科大和南京大学都可以自助注册，只需要是使用学校邮箱即可。中科大同时也提供了 Github、Gitlab、学校一卡通认证。自助注册的好处是，即使已经离校无法使用学校邮箱，实际上也还是可以保留账户继续使用（除非专门对毕业生进行封禁）。其实，对于内部团队使用的 Gitlab 来说，由管理员手动创建用户也是没有什么问题的，毕竟人数不会太多。但是这样一来，可能会出现维护多个账号和密码的烦恼。因此，采用 LDAP 来接入认证是比较合适的。对于非团队用户不打算放在 LDAP 目录里也可以手动在 Gitlab 创建用户，当用户不再使用时就可以封禁。&lt;/p&gt;

&lt;h3 id=&quot;ldap-用户合并&quot;&gt;LDAP 用户合并&lt;/h3&gt;

&lt;p&gt;  也可能存在先有 Gitlab 账户、然后才有的 LDAP 目录的情况，这也不要紧，因为 Gitlab 支持 LDAP 认证方式的用户与现有用户进行合并。举个例子，如果我已经在 Gitlab 中创建了用户名为 zhonger、邮箱为 zhonger@example.com 的用户，那么我在 LDAP 目录中只需要把 mail 字段也写成 zhonger@example.com 即可被 Gitlab 识别成同一用户。或者说，我们可以在 Gitlab 中增加 LDAP 目录中的 mail 字段的邮箱（Gitlab 支持同一用户绑定多个邮箱），这样在 Gitlab 中使用 LDAP 认证的时候也会被视为同一用户。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  由于 LDAP 用户的账户名和密码不会被 Gitlab 接管，所以当你使用 LDAP 认证登录后，原有的同邮箱的 Gitlab 用户就会自动丧失修改密码的权利。除此之外，一切照旧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  为了更加简便实践并且容易复现，这里采用的是常用的 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; Docker 镜像。可以在镜像 Github 页面下载到提供的对应 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml&quot;&gt;docker-compose.yml&lt;/a&gt; 文件。由于 LDAP 并非是默认配置，所以默认是没有 LDAP 配置段的。需要在 docker-compose.yml 文件的 environment 中增加以下环境变量。其中，请根据实际情况更改成相应的信息。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_ENABLED=true&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_LABEL=LDAP&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_HOST=ldap.example.com&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_BIND_DN=cn=admin,dc=example,dc=com&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_PASS=xxxxxxxxxxx&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_UID=uid&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_BASE=ou=people,dc=example,dc=com&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 运行一个 Gitlab 实例。由于初始运行需要执行数据库初始化等操作，可能需要几分钟，之后打开指定的端口即可看到如下类似的登录页面。可以看到，这里默认就是使用 LDAP 登录，次要登录方式才是标准登录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/BaWBKa.webp&quot; alt=&quot;登录页面 Login Page&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;info “小提示”
  这里 Gitlab 默认使用 uid 作为 username，而非常见 LDAP 登录定义里的 cn 字段，所以只需要最简单的 uid 和 password 即可登录成功。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Jun 2022 15:20:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-gitlab.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-gitlab.html</guid>
        
        <category>LDAP</category>
        
        <category>Gitlab</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
  </channel>
</rss>
